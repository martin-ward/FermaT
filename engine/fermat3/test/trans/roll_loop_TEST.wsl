C:"
==========================================================================
FermaT Transformation System
Copyright (C) 2001 Software Migrations Limited.
Email: martin@gkc.org.uk

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
==========================================================================";

@Test_Trans(" 1st test of `Roll_Loop'",
	    (FILL Statements IF x > 0
	                       THEN x := x - 1;
			       WHILE x > 0 DO x := x - 1 OD FI ENDFILL),
	    <1>,
	    TR_Roll_Loop,
	    < >,
	    (FILL Statements WHILE x > 0 DO x := x - 1 OD ENDFILL));


@Test_Trans(" 2nd test of `Roll_Loop'",
	    (FILL Statements 

IF i <= n
  THEN IF card[name] <> last[name] OR i = 1
         THEN IF sw1 = 1
                THEN !P write(last[name], total VAR os) FI;
              sw1 := 1;
              total := 0 FI;
       total := card[number] + total;
       last := card;
       i := i + 1;
       card := cards[i];
       WHILE i <= n DO
         IF card[name] <> last[name] OR i = 1
           THEN IF sw1 = 1
                  THEN !P write(last[name], total VAR os) FI;
                sw1 := 1;
                total := 0 FI;
         total := card[number] + total;
         last := card;
         i := i + 1;
         card := cards[i] OD FI

            ENDFILL),
	    <1>,
	    TR_Roll_Loop,
	    < >,
	    (FILL Statements 

WHILE i <= n DO
  IF card[name] <> last[name] OR i = 1
    THEN IF sw1 = 1
           THEN !P write(last[name], total VAR os) FI;
         sw1 := 1;
         total := 0 FI;
  total := card[number] + total;
  last := card;
  i := i + 1;
  card := cards[i] OD

             ENDFILL));


SKIP

