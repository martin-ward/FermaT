C:"
==========================================================================
FermaT Transformation System
Copyright (C) 2001 Software Migrations Limited.
Email: martin@gkc.org.uk

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
==========================================================================";

@Test_Trans("First test of `Partially Join Cases' ",
	    (FILL Statements IF X = 0
				THEN X := 5
			     ELSIF X = 1
				THEN A := 0; X := 6; SKIP
			     ELSIF X = 2
				THEN A := 1; SKIP; X := 6; SKIP
				ELSE X := 3 FI ENDFILL),
	    <1>,
	    TR_Partially_Join_Cases,
	    1,
	    (FILL Statements IF X = 0
				THEN X := 5
			     ELSIF (X = 1) OR (X = 2)
				THEN IF X = 1 THEN {(X = 1)}; A := 0 
					      ELSE {(X = 2)}; A := 1; SKIP FI;
				     X := 6;
				     SKIP
				ELSE X := 3 FI ENDFILL));


@Test_Trans("Second test of `Partially Join Cases' ",
	    (FILL Statements IF X = 0
				THEN X := 5; A := A + 1; B := B * A
				ELSE X := 3; A := A + 1; B := B * A FI ENDFILL),
	    <1>,
	    TR_Partially_Join_Cases,
	    1,
	    (FILL Statements IF X = 0
				THEN {X = 0}; X := 5
				ELSE {TRUE}; X := 3 FI;
			     A := A + 1; B := B * A ENDFILL) );

@Test_Trans("Third test of `Partially Join Cases' ",
	    (FILL Statements IF (X = 1) AND (Y = 2)
				THEN A := 1
			     ELSIF (X = 0) AND (Y =1)
				THEN A:=1; B:=3; CALL Z
			     ELSIF (X = 0)
				THEN A:= 2; B:=3; CALL Z
			     ELSIF Y=99 THEN B:=99
			     FI ENDFILL),
	     <1>,
	     TR_Partially_Join_Cases,
	     1,
	     (FILL Statements IF (X=1) AND (Y=2) THEN A:=1
			      ELSIF X=0
				 THEN IF (Y=1) 
					THEN {(X=0) AND (Y=1)};A:=1 
					ELSE {X=0};A:=2 FI;
				      B:=3; CALL Z 
			       ELSIF Y=99 THEN B:=99
			       FI ENDFILL));

@Test_Trans("Fourth test of `Partially Join Cases' ",
	    (FILL Statements IF (X=1) THEN A:=1
			     ELSIF (X=2) THEN A:=2; B:=1; CALL Z
			     ELSIF (X<>2) THEN A:=3; B:=1; CALL Z
			     ELSIF (Y=0) THEN B:=999 FI ENDFILL),
	    <1>,
	    TR_Partially_Join_Cases,
	    1,
	    (FILL Statements IF (X=1) THEN A:=1
			     ELSE IF (X=2) THEN {X=2}; A:=2
					   ELSE {X<>2}; A:=3 FI;
				  B:=1; CALL Z FI ENDFILL));

@Test_Trans("Fifth test of `Partially Join Cases' ",
	    (FILL Statements IF (X=1) THEN A:=1
			     ELSIF (X=2) THEN A:=2; B:=1; CALL Q
			     ELSIF (X<>2) THEN A:=3; B:=1; CALL Z
			     ELSIF (Y=0) THEN B:=999 FI ENDFILL),
	    <1>,
	    TR_Partially_Join_Cases,
	    1,
	    "Fail");

@Test_Trans("Sixth test of `Partially Join Cases' ",
	    (FILL Statements

      IF HOLDBN[1] = "0"
	THEN RECTBLDS := TBLADDR;
	     RECTOT := a[RECTBLDS].RSWHCNT;
	     p_3(); p_4()
      ELSIF HOLDBN[1] = "1"
	THEN RECTBLDS := TBLADDR;
	     RECTOT := a[RECTBLDS].RSCECNT;
	     p_3(); p_4()
      ELSIF HOLDBN[1] = "2"
	THEN RECTBLDS := TBLADDR;
	     RECTOT := a[RECTBLDS].RSCWICNT;
	     p_3(); p_4()
      ELSIF HOLDBN[1] = "4"
	THEN RECTBLDS := TBLADDR;
	     RECTOT := a[RECTBLDS].RSCWSCNT;
	     p_3(); p_4()
      ELSIF HOLDBN[1] = "7"
	THEN RECTBLDS := TBLADDR;
	     RECTOT := a[RECTBLDS].RSCBCNT;
	     p_3(); p_4()
      ELSIF HOLDBN[1] = "8"
	THEN RECTBLDS := TBLADDR;
	     RECTOT := a[RECTBLDS].RSCSCNT;
	     p_3(); p_4()
	ELSE !P ABEND("3507,DUMP" VAR r0, r1, r15, os);
	     exit_flag := 1 FI

ENDFILL),
	    <1>,
	    TR_Partially_Join_Cases,
	    1,
	    (FILL Statements

IF HOLDBN[1] = "0"
     OR HOLDBN[1] = "1"
     OR HOLDBN[1] = "2"
     OR HOLDBN[1] = "4"
     OR HOLDBN[1] = "7"
     OR HOLDBN[1] = "8"
  THEN IF HOLDBN[1] = "0"
	 THEN {HOLDBN[1] = "0"};
	      RECTBLDS := TBLADDR;
	      RECTOT := a[RECTBLDS].RSWHCNT
       ELSIF HOLDBN[1] = "1"
	 THEN {HOLDBN[1] = "1"};
	      RECTBLDS := TBLADDR;
	      RECTOT := a[RECTBLDS].RSCECNT
       ELSIF HOLDBN[1] = "2"
	 THEN {HOLDBN[1] = "2"};
	      RECTBLDS := TBLADDR;
	      RECTOT := a[RECTBLDS].RSCWICNT
       ELSIF HOLDBN[1] = "4"
	 THEN {HOLDBN[1] = "4"};
	      RECTBLDS := TBLADDR;
	      RECTOT := a[RECTBLDS].RSCWSCNT
       ELSIF HOLDBN[1] = "7"
	 THEN {HOLDBN[1] = "7"};
	      RECTBLDS := TBLADDR;
	      RECTOT := a[RECTBLDS].RSCBCNT
	 ELSE {HOLDBN[1] = "8"};
	      RECTBLDS := TBLADDR;
	      RECTOT := a[RECTBLDS].RSCSCNT FI;
       p_3();
       p_4()
  ELSE !P ABEND("3507,DUMP" VAR r0, r1, r15, os);
       exit_flag := 1 FI

ENDFILL));



SKIP




