C:"
==========================================================================
FermaT Transformation System
Copyright (C) 2001 Software Migrations Limited.
Email: martin@gkc.org.uk

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
==========================================================================";

@Test_Trans(" 1st test of `Loop_Doubling'",
	    (FILL Statements DO IF n = 0 THEN EXIT(1) FI;
                                n := n - 1;
                                IF x = y THEN EXIT(1)
                                ELSIF p = q THEN EXIT(2) FI OD ENDFILL),
	    <1>,
	    TR_Loop_Doubling,
	    < >,
	    (FILL Statements DO IF n = 0 THEN EXIT(1) FI;
                                n := n - 1;
                                IF x = y THEN EXIT(1) ELSIF p = q THEN EXIT(2) FI;
                                IF n = 0 THEN EXIT(1) FI;
                                n := n - 1;
                                IF x = y THEN EXIT(1) ELSIF p = q THEN EXIT(2) FI OD
             ENDFILL));


@Test_Trans(" 2nd test of `Loop_Doubling'",
	    (FILL Statements DO DO IF n = 0 THEN EXIT(2) FI;
                                   n := n - 1;
                                   IF x = y THEN EXIT(1) 
                                   ELSIF p = q THEN EXIT(3) FI OD OD ENDFILL),
	    <1>,
	    TR_Loop_Doubling,
	    < >,
	    (FILL Statements DO DO IF n = 0 THEN EXIT(2) FI;
                                   n := n - 1;
                                   IF x = y THEN EXIT(1) ELSIF p = q THEN EXIT(3) FI
                                OD;
                                DO IF n = 0 THEN EXIT(2) FI;
                                   n := n - 1;
                                   IF x = y THEN EXIT(1) ELSIF p = q THEN EXIT(3) FI
                             OD OD ENDFILL));


@Test_Trans(" 3rd test of `Loop_Doubling'",
	    (FILL Statements DO n := n - 1 OD ENDFILL),
	    <1>,
	    TR_Loop_Doubling,
	    < >,
	    (FILL Statements DO n := n - 1; n := n - 1 OD ENDFILL));


SKIP

