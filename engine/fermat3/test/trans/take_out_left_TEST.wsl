C:"
==========================================================================
FermaT Transformation System
Copyright (C) 2001 Software Migrations Limited.
Email: martin@gkc.org.uk

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
==========================================================================";

@Test_Trans(" 1st test of `Take Out Left'",
	    (FILL Statements J := 0; J := J + 1 ENDFILL),
	    <1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans(" 2nd test of `Take Out Left'",
	    (FILL Statements IF X = 1
				THEN A := 3; B := 1
			     ELSIF X = 2
				THEN A := 3; B := 2
				ELSE A := 3; B := 3 FI ENDFILL),
	    <1, 2, 2, 1>,
	    TR_Take_Out_Left,
	    < >,
	    (FILL Statements A := 3;
			     IF X = 1
				THEN B := 1
			     ELSIF X = 2
				THEN B := 2
				ELSE B := 3 FI ENDFILL));


@Test_Trans(" 3rd test of `Take Out Left'",
	    (FILL Statements IF X = 1
				THEN A := 3
			     ELSIF X = 2
				THEN A := 3
				ELSE A := 3 FI ENDFILL),
	    <1, 1, 2, 1>,
	    TR_Take_Out_Left,
	    < >,
	    (FILL Statements A := 3 ENDFILL));


@Test_Trans(" 4th test of `Take Out Left'",
	    (FILL Statements IF X = 1
				THEN A := 3845
			     ELSIF X = 2
				THEN A := 3
				ELSE A := 3 FI ENDFILL),
	    <1, 1, 2, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans(" 5th test of `Take Out Left'",
	    (FILL Statements IF X = 1
				THEN A := 3
			     ELSIF X = A
				THEN A := 3
				ELSE A := 3 FI ENDFILL),
	    <1, 3, 2, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans(" 6th test of `Take Out Left'",
	    (FILL Statements IF X = 1
				THEN A := 3
			     ELSIF X = 2
				THEN A := 3 FI ENDFILL),
	    <1, 1, 2, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans(" 7th test of `Take Out Left'",
	    (FILL Statements FOR I := 0 TO 10 STEP 2 DO
				 K := 1;
				 J := J + I;
				 SKIP OD ENDFILL),
	    <1, 5, 1>,
	    TR_Take_Out_Left,
	    < >,
	    (FILL Statements K := 1;
			     FOR I := 0 TO 10 STEP 2 DO
				 J := J + I;
				 SKIP OD ENDFILL));


@Test_Trans(" 8th test of `Take Out Left'",
	    (FILL Statements FOR I := 0 TO 10 STEP 2 DO
				 K := K + 1;
				 J := J + I;
				 SKIP OD ENDFILL),
	    <1, 5, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans(" 9th test of `Take Out Left'",
	    (FILL Statements FOR I := 0 TO 10 STEP (A * B) DO
				 K := 1;
				 J := J + I;
				 SKIP OD ENDFILL),
	    <1, 5, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans("11th test of `Take Out Left'",
	    (FILL Statements FOR I := K TO K+10 STEP 1 DO
				 K := 1;
				 J := J + I;
				 SKIP OD ENDFILL),
	    <1, 5, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans("12th test of `Take Out Left'",
	    (FILL Statements FOR I := K TO K+10 STEP 1 DO
				 K := 1;
				 J := J + I;
				 SKIP OD ENDFILL),
	    <1, 5, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans("13th test of `Take Out Left'",
	    (FILL Statements FOR I := 0 TO 10 STEP 2 DO
				 K := J;
				 J := J + I;
				 SKIP OD ENDFILL),
	    <1, 5, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans("14th test of `Take Out Left'",
	    (FILL Statements FOR I := 0 TO 10 STEP 2 DO
				 K := A;
				 K := J + K;
				 SKIP OD ENDFILL),
	    <1, 5, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans("15th test of `Take Out Left'",
	    (FILL Statements {(X <> 10)};
			     WHILE X <> 10 DO
				   K := 1;
				   X := X + A;
				   SKIP OD ENDFILL),
	    <2, 2, 1>,
	    TR_Take_Out_Left,
	    < >,
	    (FILL Statements {(X <> 10)};
			     K := 1;
			     WHILE X <> 10 DO
				   X := X + A;
				   SKIP OD ENDFILL));


@Test_Trans("16th test of `Take Out Left'",
	    (FILL Statements {(X <> 10)};
			     WHILE X <> 10 DO
				   K := K + 1;
				   X := X + A;
				   SKIP OD ENDFILL),
	    <2, 2, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans("17th test of `Take Out Left'",
	    (FILL Statements {(X <> 1)};
			     WHILE X <> 10 DO
				   K := 1;
				   X := X + A;
				   SKIP OD ENDFILL),
	    <2, 2, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans("18th test of `Take Out Left'",
	    (FILL Statements {(X <> 10)};
			     WHILE X <> 10 DO
				   K := X;
				   X := X + A;
				   SKIP OD ENDFILL),
	    <2, 2, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");

@Test_Trans("19th test of `Take Out Left'",
	    (FILL Statements {(Y <> 10)};
			     WHILE Y <> 10 DO
				   X := A;
				   X := X + B;
				   SKIP OD ENDFILL),
	    <2, 2, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");

@Test_Trans("20th test of `Take Out Left'",
	    (FILL Statements {(X < 20 AND Z=1)};
			     WHILE X < 20 DO
				   Y := 3;
				   X := X + 1;
				   Z := Y + 1 OD ENDFILL),
	    <2, 2, 1>,
	    TR_Take_Out_Left,
	    < >,
	    (FILL Statements {(X < 20 AND Z=1)};
			     Y := 3;
			     WHILE X < 20 DO
				   X := X + 1;
				   Z := Y+1 OD ENDFILL));


@Test_Trans("21th test of `Take Out Left'",
	    (FILL Statements BEGIN IF A = 1 THEN John(2 VAR P) ELSE Mary(3 VAR Q) FI;
				   Increment(1 VAR X);
				   Decrement(2 VAR Y)
			     WHERE PROC Increment(A VAR V) == V := V + A END,
				   PROC Decrement(A VAR V) == V := V - A END
			     END ENDFILL),
	    <1, 1, 1>,
	    TR_Take_Out_Left,
	    < >,
	    (FILL Statements IF A = 1 THEN John(2 VAR P) ELSE Mary(3 VAR Q) FI;
			     BEGIN Increment(1 VAR X);
				   Decrement(2 VAR Y)
			     WHERE PROC Increment(A VAR V) == V := V + A END,
				   PROC Decrement(A VAR V) == V := V - A END
			     END ENDFILL));


@Test_Trans("22th test of `Take Out Left'",
	    (FILL Statements BEGIN IF A = 1 THEN John(2 VAR P) ELSE Increment(3 VAR Q) FI;
				   Increment(1 VAR X);
				   Decrement(2 VAR Y)
			     WHERE PROC Increment(A VAR V) == V := V + A END,
				   PROC Decrement(A VAR V) == V := V - A END
			     END ENDFILL),
	    <1, 1, 1>,
	    TR_Take_Out_Left,
	    < >,
	    "Fail");


@Test_Trans("23th test of `Take Out Left'",
	    (FILL Statements FOR I := 0 TO 10 STEP 2 DO
				 K := A;
				 J := A + I;
				 SKIP OD ENDFILL),
	    <1, 5, 1>,
	    TR_Take_Out_Left,
	    < >,
	    (FILL Statements K := A;
			     FOR I := 0 TO 10 STEP 2 DO
				 J := A + I;
				 SKIP OD ENDFILL ));

SKIP

