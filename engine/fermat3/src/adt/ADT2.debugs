;;; Scheme translation of WSL code
; Debugging versions of the basic ADT functions. 
; The structure of a WSL item is either: 
; CONS(dtable, CONS(spec_type, value)) OR: 
; CONS(dtable, CONS(spec_type, component_list)) 
; These definitions assume that we ONLY call @V() on an item which is known 
; to have a value: 
(define (@V //I)
 (@Check_Item "@V" //I)
 (cond
  ((@Has_Comps_Type? (car (cdr //I)))
   (error "@V called on an item type which has no value: " (car (cdr //I)))))
 (cdr (cdr //I)))

(define (@Cs //I)
 (@Check_Item "@Cs" //I)
 (cond
  ((@Has_Value_Type? (car (cdr //I)))
   (error "@Cs called on an item type which has a value: " (car (cdr //I)))))
 (cdr (cdr //I)))

; These definitions are more relaxed and allow the functions to be applied 
; to any type of item: 
(define (@Value //I)
 (@Check_Item "@V" //I)
 (if (@Has_Comps_Type? (car (cdr //I))) '() (cdr (cdr //I))))

(define (@Components //I)
 (@Check_Item "@Cs" //I)
 (if (@Has_Comps_Type? (car (cdr //I))) (cdr (cdr //I)) '()))

(define (@Components? //I)
 
 (not (null? (@Components //I))))

(define (@Cs? //I)
 
 (not (null? (@Components //I))))

(define (@Spec_Type //I)
 
 (@ST //I))

(define (@ST //I)
 (@Check_Item "@ST" //I)
 (car (cdr //I)))

(set! //Spec_/To_/Gen_/Type (make-vector 999 0))
(for /i 1 999 1 
 (vector-set! //Spec_/To_/Gen_/Type (- /i 1) (if (< /i 100) /i (quotient /i 100))))
(define (@Gen_Type //I)
 (@Check_Item "@Gen_Type" //I)
 (vector-ref //Spec_/To_/Gen_/Type (- (car (cdr //I)) 1)))

(define (@GT //I)
 (@Check_Item "@Gen_Type" //I)
 (vector-ref //Spec_/To_/Gen_/Type (- (car (cdr //I)) 1)))

(define (@Size //I)
 (@Check_Item "@Size" //I)
 (if (@Has_Comps_Type? (car (cdr //I))) (- (length //I) 2) 0))

; @Get_n is now a macro which checks for small integer constant n 
(define (@Get_L //I /n /m)
 (@Check_Item "@Get_L" //I)
 (cond
  ((@Has_Value_Type? (car (cdr //I)))
   (error "@Get_L called on an item type which a value.")))
 (firstn (+ (- /m /n) 1) (nthcdr (+ /n 1) //I)))

(define (@Get //I /posn)
 (@Check_Item "@Get" //I)
 (if (null? /posn) //I (@Get (@Get_n //I (car /posn)) (cdr /posn))))

(define (@Make //S/T /value /comps)
 (cond
  ((not (number? //S/T))
   (error "@Make called with non-numeric ST.")))
 (cond
  ((and (not (null? /value)) (not (null? /comps)))
   (error "@Make called with both value and comps.")))
 (cond
  ((and (not (null? /value)) (@Has_Comps_Type? //S/T))
   (error "@Make called with value on a comps type.")))
 (cond
  ((and (not (null? /comps)) (@Has_Value_Type? //S/T))
   (error "@Make called with comps on a value type.")))
 (cond
  ((not (null? /comps))
   ; Check that the supplied components have the right types. 
   ; If there are fewer than expected components, then don't check 
   ; (this happens inside a FOREACH and is fixed later) 
   (let ((//C /comps)
         (//S (@Syntax //S/T))
         (//L (if (@List_Type? //S/T) 1 0)))
    (cond
     ((and (= //L 0) (< (length //C) (length //S)))
      (set! //C '()))
     ((and (= //L 0) (> (length //C) (length //S)))
      (error "@Make called with too many components.")))
    (while (not (null? //C)) 
     (begin
      (cond
       ((null? (car //C))
        (error "@Make called with empty component.")))
      (cond
       ((not (= (@GT (car //C)) (car //S)))
        (display-list "C = " (@GT (car //C)) " S = " (car //S))
        (@Print_WSL (car //C) "")
        (error "@Make called with component of wrong type.")))
      (set! //C (cdr //C))
      (cond
       ((= //L 0)
        (set! //S (cdr //S)))))))))
 (if (null? /value) (cons '() (cons //S/T /comps)) (cons '() (cons //S/T /value))))

; Check that I (which was passed as an argument to the function funct) 
; is a valid item: 
(define (@Check_Item /funct //I)
 (cond
  ((null? //I)
   (error (string-append /funct " called on an empty list.")))
  ((not (sequence? (car //I)))
   (error (string-append /funct " called on something with an invalid dbase.")))
  ((null? (cdr //I))
   (error (string-append /funct " called on a singleton list.")))
  ((not (number? (car (cdr //I))))
   (error (string-append /funct " called on something with a bad spec type.")))))

; Routines for handling sets as sorted lists, using @Gen_Less? for comparisons. 
(define (@Set_Check /a)
 (cond
  ((and (not (null? /a)) (not (null? (cdr /a))))
   (cond
    ((@Gen_Less? (car (cdr /a)) (car /a))
     (error "Non-sorted set found:" /a)))
   (@Set_Check (cdr /a)))))

(define (@Set_Union /a /b)
 #t
 (@Set_Check /a)
 (@Set_Check /b)
 (if (null? /a) /b (if (null? /b) /a (if (equal? (car /a) (car /b)) (cons (car /a) (@Set_Union (cdr /a) (cdr /b))) (if (@Gen_Less? (car /a) (car /b)) (cons (car /a) (@Set_Union (cdr /a) /b)) (cons (car /b) (@Set_Union /a (cdr /b))))))))

(define (@Set_Intersect /a /b)
 #t
 (@Set_Check /a)
 (@Set_Check /b)
 (if (or (null? /a) (null? /b)) '() (if (equal? (car /a) (car /b)) (cons (car /a) (@Set_Intersect (cdr /a) (cdr /b))) (if (@Gen_Less? (car /a) (car /b)) (@Set_Intersect (cdr /a) /b) (@Set_Intersect /a (cdr /b))))))

(define (@Set_Difference /a /b)
 #t
 (@Set_Check /a)
 (@Set_Check /b)
 (if (null? /a) '() (if (null? /b) /a (if (equal? (car /a) (car /b)) (@Set_Difference (cdr /a) (cdr /b)) (if (@Gen_Less? (car /a) (car /b)) (cons (car /a) (@Set_Difference (cdr /a) /b)) (@Set_Difference /a (cdr /b)))))))

(define (@Set_Subset? /a /b)
 #t
 (@Set_Check /a)
 (@Set_Check /b)
 (or (null? /a) (and (not (null? /b)) (or (and (equal? (car /a) (car /b)) (@Set_Subset? (cdr /a) (cdr /b))) (and (@Gen_Less? (car /b) (car /a)) (@Set_Subset? /a (cdr /b)))))))

; Sort a list of elements (maybe with duplicates) and return a set: 
(define (@Make_Set //L)
 (let ((//R '())
       (/len (length //L)))
  (cond
   ((<= /len 1)
    (set! //R //L))
   ((= /len 2)
    (cond
     ((equal? (car //L) (car (cdr //L)))
      (set! //R (list (car //L))))
     ((@Gen_Less? (car //L) (car (cdr //L)))
      (set! //R //L))
     (#t
      (set! //R (list (car (cdr //L)) (car //L))))))
   (#t
    (let ((/mid (quotient /len 2)))
     (set! //R (@Set_Union (@Make_Set (@Sub_Seg //L 1 /mid)) (@Make_Set (@Final_Seg //L (+ /mid 1))))))))
  //R))

; An efficient way to form the union or intersection of a list of sets 
; is to pick the two smallest sets in the list and process those, 
; returning the result to the list. Repeat until only one set remains. 
; I think that this can be done efficiently using a heap structure. 
; Such a function can be used to optimise REDUCE(\/, ...) 
; and REDUCE(/\, ...) functions. 
; ============================================================================== 

