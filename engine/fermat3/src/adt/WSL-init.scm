;;; Scheme translation of WSL code
;
;==========================================================================
;FermaT Transformation System
;Copyright (C) 2001 Software Migrations Limited.
;Email: martin@gkc.org.uk
;
;This program is free software; you can redistribute it and/or modify
;it under the terms of the GNU General Public License as published by
;the Free Software Foundation; either version 3 of the License, or
;(at your option) any later version.
;
;This program is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;==========================================================================
; WSL Syntax: 
(set! //Syntax_/List 1)
(set! //Syntax_/One_/Pattern 2)
(set! //Syntax_/Many_/Pattern 3)
(set! //Syntax_/Any_/Pattern 4)
(set! //Syntax_/Ifmatch 5)
(set! //Syntax_/Fill 6)
(set! //Syntax_/One_/Int 9)
(set! //Syntax_/Any_/Int 10)
(set! //Syntax_/One_/Var 11)
(set! //Syntax_/Any_/Var 12)
(set! //Syntax_/Type (make-vector-eval 1999 0))
(set! //Syntax_/Comps (make-vector-eval 1999 '()))
(set! //Syntax_/Name (make-vector-eval 1999 "UNKNOWN"))
(set! //Syntax_/V_/To_/E (make-vector-eval 1999 0))
(set! //Syntax_/E_/To_/V (make-vector-eval 1999 0))
(set! //Syntax_/Value (make-vector-eval 1999 0))
; Set up the T_name variables and fill in the Syntax_Comps array 
(set! //T_/Statement 1)
(set! //T_/Expression 2)
(set! //T_/Condition 3)
(set! //T_/Definition 4)
(set! //T_/Lvalue 5)
(set! //T_/Assign 6)
(set! //T_/Guarded 7)
(set! //T_/Action 8)
(set! //T_/Name 9)
(set! //T_/Expressions 10)
(set! //T_/Lvalues 12)
(set! //T_/Assigns 13)
(set! //T_/Definitions 14)
(set! //T_/Actions 15)
(set! //T_/Guardeds 16)
(set! //T_/Statements 17)
(set! //T_/Datatype 18)
(set! //T_/A_/Proc_/Call 101)
(set! //T_/M/W_/Proc_/Call 102)
(set! //T_/X_/Proc_/Call 103)
(set! //T_/Stat_/Place 104)
(set! //T_/Stat_/Pat_/One 105)
(set! //T_/Stat_/Pat_/Many 106)
(set! //T_/Stat_/Pat_/Any 107)
(set! //T_/Abort 108)
(set! //T_/Assert 109)
(set! //T_/Assignment 110)
(set! //T_/A_/S 111)
(set! //T_/Call 112)
(set! //T_/Comment 113)
(set! //T_/Cond 114)
(set! //T_/D_/If 115)
(set! //T_/D_/Do 116)
(set! //T_/Exit 117)
(set! //T_/For 118)
(set! //T_/Foreach_/Stat 119)
(set! //T_/Foreach_/Stats 120)
(set! //T_/Foreach_/T/S 121)
(set! //T_/Foreach_/T/Ss 122)
(set! //T_/Foreach_/S/T/S 123)
(set! //T_/Foreach_/Expn 124)
(set! //T_/Foreach_/Cond 125)
(set! //T_/Ateach_/Stat 126)
(set! //T_/Ateach_/Stats 127)
(set! //T_/Ateach_/T/S 128)
(set! //T_/Ateach_/T/Ss 129)
(set! //T_/Ateach_/S/T/S 130)
(set! //T_/Ateach_/Expn 131)
(set! //T_/Ateach_/Cond 132)
(set! //T_/Floop 133)
(set! //T_/Join 134)
(set! //T_/Pop 135)
(set! //T_/Proc_/Call 136)
(set! //T_/Push 137)
(set! //T_/Spec 138)
(set! //T_/Var 139)
(set! //T_/Where 140)
(set! //T_/While 141)
(set! //T_/M/W_/Proc 142)
(set! //T_/M/W_/Funct 143)
(set! //T_/M/W_/B/Funct 144)
(set! //T_/Skip 145)
(set! //T_/Foreach_/N/A/S 146)
(set! //T_/Ateach_/N/A/S 147)
(set! //T_/Foreach_/Variable 148)
(set! //T_/Foreach_/Global_/Var 149)
(set! //T_/Ateach_/Variable 150)
(set! //T_/Ateach_/Global_/Var 151)
(set! //T_/Foreach_/Lvalue 152)
(set! //T_/Ateach_/Lvalue 153)
(set! //T_/For_/In 154)
(set! //T_/Puthash 155)
(set! //T_/Print 156)
(set! //T_/Prinflush 157)
(set! //T_/Maphash 158)
(set! //T_/Error 159)
(set! //T_/Stat_/Int_/One 160)
(set! //T_/Stat_/Int_/Any 161)
(set! //T_/Stat_/Var_/One 162)
(set! //T_/Stat_/Var_/Any 163)
(set! //T_/Declare_/Datatype 164)
(set! //T_/Typedef 165)
(set! //T_/Ifmatch_/Stat 180)
(set! //T_/Ifmatch_/Expn 181)
(set! //T_/Ifmatch_/Cond 182)
(set! //T_/Ifmatch_/Defn 183)
(set! //T_/Ifmatch_/Lvalue 184)
(set! //T_/Ifmatch_/Assign 185)
(set! //T_/Ifmatch_/Guarded 186)
(set! //T_/Ifmatch_/Action 187)
(set! //T_/Ifmatch_/Stats 188)
(set! //T_/Ifmatch_/Expns 189)
(set! //T_/Ifmatch_/Lvalues 191)
(set! //T_/Ifmatch_/Assigns 192)
(set! //T_/Ifmatch_/Defns 193)
(set! //T_/X_/Funct_/Call 201)
(set! //T_/M/W_/Funct_/Call 202)
(set! //T_/Expn_/Place 203)
(set! //T_/Var_/Place 204)
(set! //T_/Number 205)
(set! //T_/String 206)
(set! //T_/Variable 207)
(set! //T_/Primed_/Var 208)
(set! //T_/Sequence 209)
(set! //T_/Aref 210)
(set! //T_/Sub_/Seg 211)
(set! //T_/Rel_/Seg 212)
(set! //T_/Final_/Seg 213)
(set! //T_/Funct_/Call 214)
(set! //T_/Map 215)
(set! //T_/Reduce 216)
(set! //T_/Expn_/Pat_/One 217)
(set! //T_/Expn_/Pat_/Many 218)
(set! //T_/Expn_/Pat_/Any 219)
(set! //T_/Plus 220)
(set! //T_/Minus 221)
(set! //T_/Times 222)
(set! //T_/Divide 223)
(set! //T_/Exponent 224)
(set! //T_/Mod 225)
(set! //T_/Div 226)
(set! //T_/If 227)
(set! //T_/Abs 228)
(set! //T_/Frac 229)
(set! //T_/Int 230)
(set! //T_/Sgn 231)
(set! //T_/Max 232)
(set! //T_/Min 233)
(set! //T_/Intersection 234)
(set! //T_/Union 235)
(set! //T_/Set_/Diff 236)
(set! //T_/Powerset 237)
(set! //T_/Set 238)
(set! //T_/Array 239)
(set! //T_/Head 240)
(set! //T_/Tail 241)
(set! //T_/Last 242)
(set! //T_/Butlast 243)
(set! //T_/Length 244)
(set! //T_/Reverse 245)
(set! //T_/Concat 246)
(set! //T_/Negate 251)
(set! //T_/Invert 252)
(set! //T_/Struct 253)
(set! //T_/Get_n 254)
(set! //T_/Get 255)
(set! //T_/Gethash 256)
(set! //T_/Hash_/Table 257)
(set! //T_/Slength 258)
(set! //T_/Substr 259)
(set! //T_/Index 260)
(set! //T_/Expn_/Int_/One 261)
(set! //T_/Expn_/Int_/Any 262)
(set! //T_/Expn_/Var_/One 263)
(set! //T_/Expn_/Var_/Any 264)
(set! //T_/Expn_/Datatype 265)
(set! //T_/Mem 266)
(set! //T_/Mem_/Seg 267)
(set! //T_/Mem_/Rel 268)
(set! //T_/Address_/Of 269)
(set! //T_/Fill_/Stat 281)
(set! //T_/Fill_/Expn 282)
(set! //T_/Fill_/Cond 283)
(set! //T_/Fill_/Defn 284)
(set! //T_/Fill_/Lvalue 285)
(set! //T_/Fill_/Assign 286)
(set! //T_/Fill_/Guarded 287)
(set! //T_/Fill_/Action 288)
(set! //T_/Fill_/Stats 289)
(set! //T_/Fill_/Expns 290)
(set! //T_/Fill_/Lvalues 292)
(set! //T_/Fill_/Assigns 293)
(set! //T_/Fill_/Defns 294)
(set! //T_/X_/B/Funct_/Call 301)
(set! //T_/M/W_/B/Funct_/Call 302)
(set! //T_/Cond_/Place 303)
(set! //T_/B/Funct_/Call 304)
(set! //T_/Cond_/Pat_/One 305)
(set! //T_/Cond_/Pat_/Many 306)
(set! //T_/Cond_/Pat_/Any 307)
(set! //T_/True 308)
(set! //T_/False 309)
(set! //T_/And 310)
(set! //T_/Or 311)
(set! //T_/Not 312)
(set! //T_/Equal 313)
(set! //T_/Less 314)
(set! //T_/Greater 315)
(set! //T_/Less_/Eq 316)
(set! //T_/Greater_/Eq 317)
(set! //T_/Not_/Equal 318)
(set! //T_/Even 319)
(set! //T_/Odd 320)
(set! //T_/Empty 321)
(set! //T_/Subset 322)
(set! //T_/Member 323)
(set! //T_/Forall 324)
(set! //T_/Exists 325)
(set! //T_/Implies 326)
(set! //T_/Sequenceq 327)
(set! //T_/Numberq 328)
(set! //T_/Stringq 329)
(set! //T_/In 330)
(set! //T_/Not_/In 331)
(set! //T_/Cond_/Int_/One 332)
(set! //T_/Cond_/Int_/Any 333)
(set! //T_/Cond_/Var_/One 334)
(set! //T_/Cond_/Var_/Any 335)
(set! //T_/Proc 401)
(set! //T_/Funct 402)
(set! //T_/B/Funct 403)
(set! //T_/Defn_/Pat_/One 404)
(set! //T_/Defn_/Pat_/Many 405)
(set! //T_/Defn_/Pat_/Any 406)
(set! //T_/Defn_/Int_/One 407)
(set! //T_/Defn_/Int_/Any 408)
(set! //T_/Defn_/Var_/One 409)
(set! //T_/Defn_/Var_/Any 410)
(set! //T_/Var_/Lvalue 501)
(set! //T_/Aref_/Lvalue 502)
(set! //T_/Sub_/Seg_/Lvalue 503)
(set! //T_/Rel_/Seg_/Lvalue 504)
(set! //T_/Final_/Seg_/Lvalue 505)
(set! //T_/Lvalue_/Pat_/One 506)
(set! //T_/Lvalue_/Pat_/Many 507)
(set! //T_/Lvalue_/Pat_/Any 508)
(set! //T_/Struct_/Lvalue 509)
(set! //T_/Lvalue_/Int_/One 510)
(set! //T_/Lvalue_/Int_/Any 511)
(set! //T_/Lvalue_/Var_/One 512)
(set! //T_/Lvalue_/Var_/Any 513)
(set! //T_/Lvalue_/Datatype 514)
(set! //T_/Mem_/Lvalue 515)
(set! //T_/Mem_/Seg_/Lvalue 516)
(set! //T_/Mem_/Rel_/Lvalue 517)
(set! //T_/Assign_/Pat_/One 601)
(set! //T_/Assign_/Pat_/Any 602)
(set! //T_/Assign_/Pat_/Many 603)
(set! //T_/Assign_/Int_/One 604)
(set! //T_/Assign_/Int_/Any 605)
(set! //T_/Assign_/Var_/One 606)
(set! //T_/Assign_/Var_/Any 607)
(set! //T_/Guarded_/Pat_/One 701)
(set! //T_/Guarded_/Pat_/Any 702)
(set! //T_/Guarded_/Pat_/Many 703)
(set! //T_/Guarded_/Int_/One 704)
(set! //T_/Guarded_/Int_/Any 705)
(set! //T_/Guarded_/Var_/One 706)
(set! //T_/Guarded_/Var_/Any 707)
(set! //T_/Action_/Pat_/One 801)
(set! //T_/Action_/Pat_/Any 802)
(set! //T_/Action_/Pat_/Many 803)
(set! //T_/Action_/Int_/One 804)
(set! //T_/Action_/Int_/Any 805)
(set! //T_/Action_/Var_/One 806)
(set! //T_/Action_/Var_/Any 807)
(set! //T_/Name_/Pat_/One 901)
(set! //T_/Name_/Int_/One 902)
(set! //T_/Name_/Var_/One 903)
(set! //T_/Datatype_/Integer 1801)
(set! //T_/Datatype_/String 1802)
(set! //T_/Datatype_/Struct 1803)
(set! //T_/Datatype_/Array 1804)
(vector-set! //Syntax_/Name (- //T_/Statement 1) "Statement")
(vector-set! //Syntax_/Name (- //T_/Expression 1) "Expression")
(vector-set! //Syntax_/Name (- //T_/Condition 1) "Condition")
(vector-set! //Syntax_/Name (- //T_/Definition 1) "Definition")
(vector-set! //Syntax_/Name (- //T_/Lvalue 1) "Lvalue")
(vector-set! //Syntax_/Name (- //T_/Assign 1) "Assign")
(vector-set! //Syntax_/Name (- //T_/Guarded 1) "Guarded")
(vector-set! //Syntax_/Name (- //T_/Action 1) "Action")
(vector-set! //Syntax_/Name (- //T_/Statements 1) "Statements")
(vector-set! //Syntax_/Name (- //T_/Expressions 1) "Expressions")
(vector-set! //Syntax_/Name (- //T_/Lvalues 1) "Lvalues")
(vector-set! //Syntax_/Name (- //T_/Assigns 1) "Assigns")
(vector-set! //Syntax_/Name (- //T_/Definitions 1) "Definitions")
(vector-set! //Syntax_/Name (- //T_/Actions 1) "Actions")
(vector-set! //Syntax_/Name (- //T_/Guardeds 1) "Guardeds")
(vector-set! //Syntax_/Name (- //T_/Name 1) "Name")
(vector-set! //Syntax_/Name (- //T_/A_/Proc_/Call 1) "A_Proc_Call")
(vector-set! //Syntax_/Name (- //T_/M/W_/Proc_/Call 1) "MW_Proc_Call")
(vector-set! //Syntax_/Name (- //T_/X_/Proc_/Call 1) "X_Proc_Call")
(vector-set! //Syntax_/Name (- //T_/Stat_/Place 1) "Stat_Place")
(vector-set! //Syntax_/Name (- //T_/Stat_/Pat_/One 1) "Stat_Pat_One")
(vector-set! //Syntax_/Name (- //T_/Stat_/Pat_/Many 1) "Stat_Pat_Many")
(vector-set! //Syntax_/Name (- //T_/Stat_/Pat_/Any 1) "Stat_Pat_Any")
(vector-set! //Syntax_/Name (- //T_/Stat_/Int_/One 1) "Stat_Int_One")
(vector-set! //Syntax_/Name (- //T_/Stat_/Int_/Any 1) "Stat_Int_Any")
(vector-set! //Syntax_/Name (- //T_/Stat_/Var_/One 1) "Stat_Var_One")
(vector-set! //Syntax_/Name (- //T_/Stat_/Var_/Any 1) "Stat_Var_Any")
(vector-set! //Syntax_/Name (- //T_/Abort 1) "Abort")
(vector-set! //Syntax_/Name (- //T_/Assert 1) "Assert")
(vector-set! //Syntax_/Name (- //T_/Assignment 1) "Assignment")
(vector-set! //Syntax_/Name (- //T_/A_/S 1) "A_S")
(vector-set! //Syntax_/Name (- //T_/Call 1) "Call")
(vector-set! //Syntax_/Name (- //T_/Comment 1) "Comment")
(vector-set! //Syntax_/Name (- //T_/Cond 1) "Cond")
(vector-set! //Syntax_/Name (- //T_/D_/If 1) "D_If")
(vector-set! //Syntax_/Name (- //T_/D_/Do 1) "D_Do")
(vector-set! //Syntax_/Name (- //T_/Exit 1) "Exit")
(vector-set! //Syntax_/Name (- //T_/For 1) "For")
(vector-set! //Syntax_/Name (- //T_/Foreach_/Stat 1) "Foreach_Stat")
(vector-set! //Syntax_/Name (- //T_/Foreach_/Stats 1) "Foreach_Stats")
(vector-set! //Syntax_/Name (- //T_/Foreach_/T/S 1) "Foreach_TS")
(vector-set! //Syntax_/Name (- //T_/Foreach_/T/Ss 1) "Foreach_TSs")
(vector-set! //Syntax_/Name (- //T_/Foreach_/S/T/S 1) "Foreach_STS")
(vector-set! //Syntax_/Name (- //T_/Foreach_/Expn 1) "Foreach_Expn")
(vector-set! //Syntax_/Name (- //T_/Foreach_/Cond 1) "Foreach_Cond")
(vector-set! //Syntax_/Name (- //T_/Ateach_/Stat 1) "Ateach_Stat")
(vector-set! //Syntax_/Name (- //T_/Ateach_/Stats 1) "Ateach_Stats")
(vector-set! //Syntax_/Name (- //T_/Ateach_/T/S 1) "Ateach_TS")
(vector-set! //Syntax_/Name (- //T_/Ateach_/T/Ss 1) "Ateach_TSs")
(vector-set! //Syntax_/Name (- //T_/Ateach_/S/T/S 1) "Ateach_STS")
(vector-set! //Syntax_/Name (- //T_/Ateach_/Expn 1) "Ateach_Expn")
(vector-set! //Syntax_/Name (- //T_/Ateach_/Cond 1) "Ateach_Cond")
(vector-set! //Syntax_/Name (- //T_/Floop 1) "Floop")
(vector-set! //Syntax_/Name (- //T_/Join 1) "Join")
(vector-set! //Syntax_/Name (- //T_/Pop 1) "Pop")
(vector-set! //Syntax_/Name (- //T_/Proc_/Call 1) "Proc_Call")
(vector-set! //Syntax_/Name (- //T_/Push 1) "Push")
(vector-set! //Syntax_/Name (- //T_/Spec 1) "Spec")
(vector-set! //Syntax_/Name (- //T_/Var 1) "Var")
(vector-set! //Syntax_/Name (- //T_/Where 1) "Where")
(vector-set! //Syntax_/Name (- //T_/While 1) "While")
(vector-set! //Syntax_/Name (- //T_/M/W_/Proc 1) "MW_Proc")
(vector-set! //Syntax_/Name (- //T_/M/W_/Funct 1) "MW_Funct")
(vector-set! //Syntax_/Name (- //T_/M/W_/B/Funct 1) "MW_BFunct")
(vector-set! //Syntax_/Name (- //T_/Skip 1) "Skip")
(vector-set! //Syntax_/Name (- //T_/Foreach_/N/A/S 1) "Foreach_NAS")
(vector-set! //Syntax_/Name (- //T_/Ateach_/N/A/S 1) "Ateach_NAS")
(vector-set! //Syntax_/Name (- //T_/Foreach_/Variable 1) "Foreach_Variable")
(vector-set! //Syntax_/Name (- //T_/Foreach_/Global_/Var 1) "Foreach_Global_Var")
(vector-set! //Syntax_/Name (- //T_/Ateach_/Variable 1) "Ateach_Variable")
(vector-set! //Syntax_/Name (- //T_/Ateach_/Global_/Var 1) "Ateach_Global_Var")
(vector-set! //Syntax_/Name (- //T_/Foreach_/Lvalue 1) "Foreach_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Ateach_/Lvalue 1) "Ateach_Lvalue")
(vector-set! //Syntax_/Name (- //T_/For_/In 1) "For_In")
(vector-set! //Syntax_/Name (- //T_/Puthash 1) "Puthash")
(vector-set! //Syntax_/Name (- //T_/Print 1) "Print")
(vector-set! //Syntax_/Name (- //T_/Prinflush 1) "Prinflush")
(vector-set! //Syntax_/Name (- //T_/Maphash 1) "Maphash")
(vector-set! //Syntax_/Name (- //T_/Error 1) "Error")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Stat 1) "Ifmatch_Stat")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Expn 1) "Ifmatch_Expn")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Cond 1) "Ifmatch_Cond")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Defn 1) "Ifmatch_Defn")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Lvalue 1) "Ifmatch_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Assign 1) "Ifmatch_Assign")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Guarded 1) "Ifmatch_Guarded")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Action 1) "Ifmatch_Action")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Stats 1) "Ifmatch_Stats")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Expns 1) "Ifmatch_Expns")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Lvalues 1) "Ifmatch_Lvalues")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Assigns 1) "Ifmatch_Assigns")
(vector-set! //Syntax_/Name (- //T_/Ifmatch_/Defns 1) "Ifmatch_Defns")
(vector-set! //Syntax_/Name (- //T_/X_/Funct_/Call 1) "X_Funct_Call")
(vector-set! //Syntax_/Name (- //T_/M/W_/Funct_/Call 1) "MW_Funct_Call")
(vector-set! //Syntax_/Name (- //T_/Expn_/Place 1) "Expn_Place")
(vector-set! //Syntax_/Name (- //T_/Var_/Place 1) "Var_Place")
(vector-set! //Syntax_/Name (- //T_/Number 1) "Number")
(vector-set! //Syntax_/Name (- //T_/String 1) "String")
(vector-set! //Syntax_/Name (- //T_/Variable 1) "Variable")
(vector-set! //Syntax_/Name (- //T_/Primed_/Var 1) "Primed_Var")
(vector-set! //Syntax_/Name (- //T_/Sequence 1) "Sequence")
(vector-set! //Syntax_/Name (- //T_/Aref 1) "Aref")
(vector-set! //Syntax_/Name (- //T_/Sub_/Seg 1) "Sub_Seg")
(vector-set! //Syntax_/Name (- //T_/Rel_/Seg 1) "Rel_Seg")
(vector-set! //Syntax_/Name (- //T_/Final_/Seg 1) "Final_Seg")
(vector-set! //Syntax_/Name (- //T_/Funct_/Call 1) "Funct_Call")
(vector-set! //Syntax_/Name (- //T_/Map 1) "Map")
(vector-set! //Syntax_/Name (- //T_/Reduce 1) "Reduce")
(vector-set! //Syntax_/Name (- //T_/Expn_/Pat_/One 1) "Expn_Pat_One")
(vector-set! //Syntax_/Name (- //T_/Expn_/Pat_/Many 1) "Expn_Pat_Many")
(vector-set! //Syntax_/Name (- //T_/Expn_/Pat_/Any 1) "Expn_Pat_Any")
(vector-set! //Syntax_/Name (- //T_/Expn_/Int_/One 1) "Expn_Int_One")
(vector-set! //Syntax_/Name (- //T_/Expn_/Int_/Any 1) "Expn_Int_Any")
(vector-set! //Syntax_/Name (- //T_/Expn_/Var_/One 1) "Expn_Var_One")
(vector-set! //Syntax_/Name (- //T_/Expn_/Var_/Any 1) "Expn_Var_Any")
(vector-set! //Syntax_/Name (- //T_/Mem 1) "Mem")
(vector-set! //Syntax_/Name (- //T_/Mem_/Seg 1) "Mem_Seg")
(vector-set! //Syntax_/Name (- //T_/Mem_/Rel 1) "Mem_Rel")
(vector-set! //Syntax_/Name (- //T_/Plus 1) "Plus")
(vector-set! //Syntax_/Name (- //T_/Minus 1) "Minus")
(vector-set! //Syntax_/Name (- //T_/Times 1) "Times")
(vector-set! //Syntax_/Name (- //T_/Divide 1) "Divide")
(vector-set! //Syntax_/Name (- //T_/Exponent 1) "Exponent")
(vector-set! //Syntax_/Name (- //T_/Mod 1) "Mod")
(vector-set! //Syntax_/Name (- //T_/Div 1) "Div")
(vector-set! //Syntax_/Name (- //T_/If 1) "If")
(vector-set! //Syntax_/Name (- //T_/Abs 1) "Abs")
(vector-set! //Syntax_/Name (- //T_/Frac 1) "Frac")
(vector-set! //Syntax_/Name (- //T_/Int 1) "Int")
(vector-set! //Syntax_/Name (- //T_/Sgn 1) "Sgn")
(vector-set! //Syntax_/Name (- //T_/Max 1) "Max")
(vector-set! //Syntax_/Name (- //T_/Min 1) "Min")
(vector-set! //Syntax_/Name (- //T_/Address_/Of 1) "Address_Of")
(vector-set! //Syntax_/Name (- //T_/Intersection 1) "Intersection")
(vector-set! //Syntax_/Name (- //T_/Union 1) "Union")
(vector-set! //Syntax_/Name (- //T_/Set_/Diff 1) "Set_Diff")
(vector-set! //Syntax_/Name (- //T_/Powerset 1) "Powerset")
(vector-set! //Syntax_/Name (- //T_/Set 1) "Set")
(vector-set! //Syntax_/Name (- //T_/Array 1) "Array")
(vector-set! //Syntax_/Name (- //T_/Head 1) "Head")
(vector-set! //Syntax_/Name (- //T_/Tail 1) "Tail")
(vector-set! //Syntax_/Name (- //T_/Last 1) "Last")
(vector-set! //Syntax_/Name (- //T_/Butlast 1) "Butlast")
(vector-set! //Syntax_/Name (- //T_/Length 1) "Length")
(vector-set! //Syntax_/Name (- //T_/Reverse 1) "Reverse")
(vector-set! //Syntax_/Name (- //T_/Concat 1) "Concat")
(vector-set! //Syntax_/Name (- //T_/Negate 1) "Negate")
(vector-set! //Syntax_/Name (- //T_/Invert 1) "Invert")
(vector-set! //Syntax_/Name (- //T_/Struct 1) "Struct")
(vector-set! //Syntax_/Name (- //T_/Get_n 1) "Get_n")
(vector-set! //Syntax_/Name (- //T_/Get 1) "Get")
(vector-set! //Syntax_/Name (- //T_/Gethash 1) "Gethash")
(vector-set! //Syntax_/Name (- //T_/Hash_/Table 1) "Hash_Table")
(vector-set! //Syntax_/Name (- //T_/Slength 1) "Slength")
(vector-set! //Syntax_/Name (- //T_/Substr 1) "Substr")
(vector-set! //Syntax_/Name (- //T_/Index 1) "Index")
(vector-set! //Syntax_/Name (- //T_/Fill_/Stat 1) "Fill_Stat")
(vector-set! //Syntax_/Name (- //T_/Fill_/Expn 1) "Fill_Expn")
(vector-set! //Syntax_/Name (- //T_/Fill_/Cond 1) "Fill_Cond")
(vector-set! //Syntax_/Name (- //T_/Fill_/Defn 1) "Fill_Defn")
(vector-set! //Syntax_/Name (- //T_/Fill_/Lvalue 1) "Fill_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Fill_/Assign 1) "Fill_Assign")
(vector-set! //Syntax_/Name (- //T_/Fill_/Guarded 1) "Fill_Guarded")
(vector-set! //Syntax_/Name (- //T_/Fill_/Action 1) "Fill_Action")
(vector-set! //Syntax_/Name (- //T_/Fill_/Stats 1) "Fill_Stats")
(vector-set! //Syntax_/Name (- //T_/Fill_/Expns 1) "Fill_Expns")
(vector-set! //Syntax_/Name (- //T_/Fill_/Lvalues 1) "Fill_Lvalues")
(vector-set! //Syntax_/Name (- //T_/Fill_/Assigns 1) "Fill_Assigns")
(vector-set! //Syntax_/Name (- //T_/Fill_/Defns 1) "Fill_Defns")
(vector-set! //Syntax_/Name (- //T_/X_/B/Funct_/Call 1) "X_BFunct_Call")
(vector-set! //Syntax_/Name (- //T_/M/W_/B/Funct_/Call 1) "MW_BFunct_Call")
(vector-set! //Syntax_/Name (- //T_/Cond_/Place 1) "Cond_Place")
(vector-set! //Syntax_/Name (- //T_/B/Funct_/Call 1) "BFunct_Call")
(vector-set! //Syntax_/Name (- //T_/Cond_/Pat_/One 1) "Cond_Pat_One")
(vector-set! //Syntax_/Name (- //T_/Cond_/Pat_/Many 1) "Cond_Pat_Many")
(vector-set! //Syntax_/Name (- //T_/Cond_/Pat_/Any 1) "Cond_Pat_Any")
(vector-set! //Syntax_/Name (- //T_/Cond_/Int_/One 1) "Cond_Int_One")
(vector-set! //Syntax_/Name (- //T_/Cond_/Int_/Any 1) "Cond_Int_Any")
(vector-set! //Syntax_/Name (- //T_/Cond_/Var_/One 1) "Cond_Var_One")
(vector-set! //Syntax_/Name (- //T_/Cond_/Var_/Any 1) "Cond_Var_Any")
(vector-set! //Syntax_/Name (- //T_/True 1) "True")
(vector-set! //Syntax_/Name (- //T_/False 1) "False")
(vector-set! //Syntax_/Name (- //T_/And 1) "And")
(vector-set! //Syntax_/Name (- //T_/Or 1) "Or")
(vector-set! //Syntax_/Name (- //T_/Not 1) "Not")
(vector-set! //Syntax_/Name (- //T_/Equal 1) "Equal")
(vector-set! //Syntax_/Name (- //T_/Less 1) "Less")
(vector-set! //Syntax_/Name (- //T_/Greater 1) "Greater")
(vector-set! //Syntax_/Name (- //T_/Less_/Eq 1) "Less_Eq")
(vector-set! //Syntax_/Name (- //T_/Greater_/Eq 1) "Greater_Eq")
(vector-set! //Syntax_/Name (- //T_/Not_/Equal 1) "Not_Equal")
(vector-set! //Syntax_/Name (- //T_/Even 1) "Even")
(vector-set! //Syntax_/Name (- //T_/Odd 1) "Odd")
(vector-set! //Syntax_/Name (- //T_/Empty 1) "Empty")
(vector-set! //Syntax_/Name (- //T_/Subset 1) "Subset")
(vector-set! //Syntax_/Name (- //T_/Member 1) "Member")
(vector-set! //Syntax_/Name (- //T_/Forall 1) "Forall")
(vector-set! //Syntax_/Name (- //T_/Exists 1) "Exists")
(vector-set! //Syntax_/Name (- //T_/Implies 1) "Implies")
(vector-set! //Syntax_/Name (- //T_/Sequenceq 1) "Sequenceq")
(vector-set! //Syntax_/Name (- //T_/Numberq 1) "Numberq")
(vector-set! //Syntax_/Name (- //T_/Stringq 1) "Stringq")
(vector-set! //Syntax_/Name (- //T_/In 1) "In")
(vector-set! //Syntax_/Name (- //T_/Not_/In 1) "Not_In")
(vector-set! //Syntax_/Name (- //T_/Proc 1) "Proc")
(vector-set! //Syntax_/Name (- //T_/Funct 1) "Funct")
(vector-set! //Syntax_/Name (- //T_/B/Funct 1) "BFunct")
(vector-set! //Syntax_/Name (- //T_/Defn_/Pat_/One 1) "Defn_Pat_One")
(vector-set! //Syntax_/Name (- //T_/Defn_/Pat_/Many 1) "Defn_Pat_Many")
(vector-set! //Syntax_/Name (- //T_/Defn_/Pat_/Any 1) "Defn_Pat_Any")
(vector-set! //Syntax_/Name (- //T_/Defn_/Int_/One 1) "Defn_Int_One")
(vector-set! //Syntax_/Name (- //T_/Defn_/Int_/Any 1) "Defn_Int_Any")
(vector-set! //Syntax_/Name (- //T_/Defn_/Var_/One 1) "Defn_Var_One")
(vector-set! //Syntax_/Name (- //T_/Defn_/Var_/Any 1) "Defn_Var_Any")
(vector-set! //Syntax_/Name (- //T_/Var_/Lvalue 1) "Var_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Aref_/Lvalue 1) "Aref_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Sub_/Seg_/Lvalue 1) "Sub_Seg_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Rel_/Seg_/Lvalue 1) "Rel_Seg_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Final_/Seg_/Lvalue 1) "Final_Seg_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Lvalue_/Pat_/One 1) "Lvalue_Pat_One")
(vector-set! //Syntax_/Name (- //T_/Lvalue_/Pat_/Many 1) "Lvalue_Pat_Many")
(vector-set! //Syntax_/Name (- //T_/Lvalue_/Pat_/Any 1) "Lvalue_Pat_Any")
(vector-set! //Syntax_/Name (- //T_/Struct_/Lvalue 1) "Struct_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Mem_/Lvalue 1) "Mem_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Mem_/Seg_/Lvalue 1) "Mem_Seg_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Mem_/Rel_/Lvalue 1) "Mem_Rel_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Assign_/Pat_/One 1) "Assign_Pat_One")
(vector-set! //Syntax_/Name (- //T_/Assign_/Pat_/Any 1) "Assign_Pat_Any")
(vector-set! //Syntax_/Name (- //T_/Assign_/Pat_/Many 1) "Assign_Pat_Many")
(vector-set! //Syntax_/Name (- //T_/Guarded_/Pat_/One 1) "Guarded_Pat_One")
(vector-set! //Syntax_/Name (- //T_/Guarded_/Pat_/Any 1) "Guarded_Pat_Any")
(vector-set! //Syntax_/Name (- //T_/Guarded_/Pat_/Many 1) "Guarded_Pat_Many")
(vector-set! //Syntax_/Name (- //T_/Action_/Pat_/One 1) "Action_Pat_One")
(vector-set! //Syntax_/Name (- //T_/Action_/Pat_/Any 1) "Action_Pat_Any")
(vector-set! //Syntax_/Name (- //T_/Action_/Pat_/Many 1) "Action_Pat_Many")
(vector-set! //Syntax_/Name (- //T_/Name_/Pat_/One 1) "Name_Pat_One")
(vector-set! //Syntax_/Name (- //T_/Lvalue_/Int_/One 1) "Lvalue_Int_One")
(vector-set! //Syntax_/Name (- //T_/Lvalue_/Int_/Any 1) "Lvalue_Int_Any")
(vector-set! //Syntax_/Name (- //T_/Lvalue_/Var_/One 1) "Lvalue_Var_One")
(vector-set! //Syntax_/Name (- //T_/Lvalue_/Var_/Any 1) "Lvalue_Var_Any")
(vector-set! //Syntax_/Name (- //T_/Struct_/Lvalue 1) "Struct_Lvalue")
(vector-set! //Syntax_/Name (- //T_/Assign_/Int_/One 1) "Assign_Int_One")
(vector-set! //Syntax_/Name (- //T_/Assign_/Int_/Any 1) "Assign_Int_Any")
(vector-set! //Syntax_/Name (- //T_/Assign_/Var_/One 1) "Assign_Var_One")
(vector-set! //Syntax_/Name (- //T_/Assign_/Var_/Any 1) "Assign_Var_Any")
(vector-set! //Syntax_/Name (- //T_/Guarded_/Int_/One 1) "Guarded_Int_One")
(vector-set! //Syntax_/Name (- //T_/Guarded_/Int_/Any 1) "Guarded_Int_Any")
(vector-set! //Syntax_/Name (- //T_/Guarded_/Var_/One 1) "Guarded_Var_One")
(vector-set! //Syntax_/Name (- //T_/Guarded_/Var_/Any 1) "Guarded_Var_Any")
(vector-set! //Syntax_/Name (- //T_/Action_/Int_/One 1) "Action_Int_One")
(vector-set! //Syntax_/Name (- //T_/Action_/Int_/Any 1) "Action_Int_Any")
(vector-set! //Syntax_/Name (- //T_/Action_/Var_/One 1) "Action_Var_One")
(vector-set! //Syntax_/Name (- //T_/Action_/Var_/Any 1) "Action_Var_Any")
(vector-set! //Syntax_/Name (- //T_/Name_/Int_/One 1) "Name_Int_One")
(vector-set! //Syntax_/Name (- //T_/Name_/Var_/One 1) "Name_Var_One")
(vector-set! //Syntax_/Comps (- //T_/Statements 1) (list //T_/Statement))
(vector-set! //Syntax_/Comps (- //T_/Expressions 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Lvalues 1) (list //T_/Lvalue))
(vector-set! //Syntax_/Comps (- //T_/Assigns 1) (list //T_/Assign))
(vector-set! //Syntax_/Comps (- //T_/Definitions 1) (list //T_/Definition))
(vector-set! //Syntax_/Comps (- //T_/Assign 1) (list //T_/Lvalue //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Guarded 1) (list //T_/Condition //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Action 1) (list //T_/Name //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Print 1) (list //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/Prinflush 1) (list //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/Maphash 1) (list //T_/Name //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Error 1) (list //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/A_/Proc_/Call 1) (list //T_/Name //T_/Expressions //T_/Lvalues))
(vector-set! //Syntax_/Comps (- //T_/X_/Proc_/Call 1) (list //T_/Name //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/Assert 1) (list //T_/Condition))
(vector-set! //Syntax_/Comps (- //T_/Assignment 1) (list //T_/Assign))
(vector-set! //Syntax_/Comps (- //T_/A_/S 1) (list //T_/Name //T_/Actions))
(vector-set! //Syntax_/Comps (- //T_/Actions 1) (list //T_/Action))
(vector-set! //Syntax_/Comps (- //T_/Cond 1) (list //T_/Guarded))
(vector-set! //Syntax_/Comps (- //T_/D_/If 1) (list //T_/Guarded))
(vector-set! //Syntax_/Comps (- //T_/D_/Do 1) (list //T_/Guarded))
(vector-set! //Syntax_/Comps (- //T_/For 1) (list //T_/Lvalue //T_/Expression //T_/Expression //T_/Expression //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/For_/In 1) (list //T_/Lvalue //T_/Expression //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Foreach_/Stat 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Foreach_/N/A/S 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Foreach_/Stats 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Foreach_/T/S 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Foreach_/T/Ss 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Foreach_/S/T/S 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Foreach_/Cond 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Foreach_/Expn 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Foreach_/Lvalue 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Foreach_/Variable 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Foreach_/Global_/Var 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ateach_/Stat 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ateach_/Stats 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ateach_/T/S 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ateach_/T/Ss 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ateach_/N/A/S 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ateach_/S/T/S 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ateach_/Cond 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ateach_/Expn 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ateach_/Lvalue 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ateach_/Variable 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ateach_/Global_/Var 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Floop 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Join 1) (list //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Pop 1) (list //T_/Lvalue //T_/Lvalue))
(vector-set! //Syntax_/Comps (- //T_/Puthash 1) (list //T_/Lvalue //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Proc_/Call 1) (list //T_/Name //T_/Expressions //T_/Lvalues))
(vector-set! //Syntax_/Comps (- //T_/Push 1) (list //T_/Lvalue //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Spec 1) (list //T_/Lvalues //T_/Condition))
(vector-set! //Syntax_/Comps (- //T_/Var 1) (list //T_/Assigns //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Where 1) (list //T_/Statements //T_/Definitions))
(vector-set! //Syntax_/Comps (- //T_/While 1) (list //T_/Condition //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/M/W_/Proc 1) (list //T_/Name //T_/Lvalues //T_/Lvalues //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/M/W_/Funct 1) (list //T_/Name //T_/Lvalues //T_/Assigns //T_/Statements //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/M/W_/B/Funct 1) (list //T_/Name //T_/Lvalues //T_/Assigns //T_/Statements //T_/Condition))
(vector-set! //Syntax_/Comps (- //T_/M/W_/Proc_/Call 1) (list //T_/Name //T_/Expressions //T_/Lvalues))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Stat 1) (list //T_/Statement //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Expn 1) (list //T_/Expression //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Cond 1) (list //T_/Condition //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Defn 1) (list //T_/Definition //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Lvalue 1) (list //T_/Lvalue //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Assign 1) (list //T_/Assign //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Guarded 1) (list //T_/Guarded //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Action 1) (list //T_/Action //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Stats 1) (list //T_/Statements //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Expns 1) (list //T_/Expressions //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Lvalues 1) (list //T_/Lvalues //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Assigns 1) (list //T_/Assigns //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Ifmatch_/Defns 1) (list //T_/Definitions //T_/Statements //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Get_n 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Get 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Gethash 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Slength 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Substr 1) (list //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/Index 1) (list //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/X_/Funct_/Call 1) (list //T_/Name //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/M/W_/Funct_/Call 1) (list //T_/Name //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/Sequence 1) (list //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/Aref 1) (list //T_/Expression //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/Sub_/Seg 1) (list //T_/Expression //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Rel_/Seg 1) (list //T_/Expression //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Final_/Seg 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Funct_/Call 1) (list //T_/Name //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/Map 1) (list //T_/Name //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Reduce 1) (list //T_/Name //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Plus 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Minus 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Times 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Divide 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Exponent 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Mod 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Div 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/If 1) (list //T_/Condition //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Abs 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Frac 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Int 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Sgn 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Max 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Min 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Address_/Of 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Mem 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Mem_/Seg 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Mem_/Rel 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Mem_/Lvalue 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Mem_/Seg_/Lvalue 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Mem_/Rel_/Lvalue 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Intersection 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Union 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Set_/Diff 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Powerset 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Set 1) (list //T_/Expression //T_/Condition))
(vector-set! //Syntax_/Comps (- //T_/Array 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Head 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Tail 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Last 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Butlast 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Length 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Reverse 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Concat 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Negate 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Invert 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Struct 1) (list //T_/Name //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Stat 1) (list //T_/Statement))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Expn 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Cond 1) (list //T_/Condition))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Defn 1) (list //T_/Definition))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Lvalue 1) (list //T_/Lvalue))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Assign 1) (list //T_/Assign))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Guarded 1) (list //T_/Guarded))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Action 1) (list //T_/Action))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Stats 1) (list //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Expns 1) (list //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Lvalues 1) (list //T_/Lvalues))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Assigns 1) (list //T_/Assigns))
(vector-set! //Syntax_/Comps (- //T_/Fill_/Defns 1) (list //T_/Definitions))
(vector-set! //Syntax_/Comps (- //T_/X_/B/Funct_/Call 1) (list //T_/Name //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/M/W_/B/Funct_/Call 1) (list //T_/Name //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/B/Funct_/Call 1) (list //T_/Name //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/And 1) (list //T_/Condition))
(vector-set! //Syntax_/Comps (- //T_/Or 1) (list //T_/Condition))
(vector-set! //Syntax_/Comps (- //T_/Not 1) (list //T_/Condition))
(vector-set! //Syntax_/Comps (- //T_/Equal 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Not_/Equal 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Less 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Greater 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Less_/Eq 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Greater_/Eq 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Even 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Odd 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Empty 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Subset 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Member 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/In 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Not_/In 1) (list //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Forall 1) (list //T_/Lvalues //T_/Condition))
(vector-set! //Syntax_/Comps (- //T_/Exists 1) (list //T_/Lvalues //T_/Condition))
(vector-set! //Syntax_/Comps (- //T_/Implies 1) (list //T_/Condition //T_/Condition))
(vector-set! //Syntax_/Comps (- //T_/Sequenceq 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Numberq 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Stringq 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Proc 1) (list //T_/Name //T_/Lvalues //T_/Lvalues //T_/Statements))
(vector-set! //Syntax_/Comps (- //T_/Funct 1) (list //T_/Name //T_/Lvalues //T_/Assigns //T_/Statements //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/B/Funct 1) (list //T_/Name //T_/Lvalues //T_/Assigns //T_/Statements //T_/Condition))
(vector-set! //Syntax_/Comps (- //T_/Aref_/Lvalue 1) (list //T_/Lvalue //T_/Expressions))
(vector-set! //Syntax_/Comps (- //T_/Sub_/Seg_/Lvalue 1) (list //T_/Lvalue //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Rel_/Seg_/Lvalue 1) (list //T_/Lvalue //T_/Expression //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Final_/Seg_/Lvalue 1) (list //T_/Lvalue //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Struct_/Lvalue 1) (list //T_/Name //T_/Lvalue))
(vector-set! //Syntax_/Comps (- //T_/Stat_/Int_/One 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Stat_/Int_/Any 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Expn_/Int_/One 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Expn_/Int_/Any 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Cond_/Int_/One 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Cond_/Int_/Any 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Defn_/Int_/One 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Defn_/Int_/Any 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Lvalue_/Int_/One 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Lvalue_/Int_/Any 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Assign_/Int_/One 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Assign_/Int_/Any 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Guarded_/Int_/One 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Guarded_/Int_/Any 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Action_/Int_/One 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Action_/Int_/Any 1) (list //T_/Expression))
(vector-set! //Syntax_/Comps (- //T_/Name_/Int_/One 1) (list //T_/Expression))
(for-in /type (list //T_/Assignment //T_/Cond //T_/D_/If //T_/D_/Do //T_/Plus //T_/Minus //T_/Times //T_/Divide //T_/Exponent //T_/Max //T_/Min //T_/Intersection //T_/Union //T_/Concat //T_/And //T_/Or //T_/Statements //T_/Expressions //T_/Lvalues //T_/Assigns //T_/Definitions //T_/Actions) 
 (vector-set! //Syntax_/Type (- /type 1) //Syntax_/List))
(for-in /type (list //T_/Stat_/Pat_/One //T_/Expn_/Pat_/One //T_/Cond_/Pat_/One //T_/Lvalue_/Pat_/One //T_/Defn_/Pat_/One //T_/Assign_/Pat_/One //T_/Guarded_/Pat_/One //T_/Action_/Pat_/One //T_/Name_/Pat_/One) 
 (vector-set! //Syntax_/Type (- /type 1) //Syntax_/One_/Pattern))
(for-in /type (list //T_/Stat_/Pat_/Many //T_/Expn_/Pat_/Many //T_/Cond_/Pat_/Many //T_/Lvalue_/Pat_/Many //T_/Defn_/Pat_/Many //T_/Assign_/Pat_/Many //T_/Guarded_/Pat_/Many //T_/Action_/Pat_/Many) 
 (vector-set! //Syntax_/Type (- /type 1) //Syntax_/Many_/Pattern))
(for-in /type (list //T_/Stat_/Pat_/Any //T_/Expn_/Pat_/Any //T_/Cond_/Pat_/Any //T_/Lvalue_/Pat_/Any //T_/Defn_/Pat_/Any //T_/Assign_/Pat_/Any //T_/Guarded_/Pat_/Any //T_/Action_/Pat_/Any) 
 (vector-set! //Syntax_/Type (- /type 1) //Syntax_/Any_/Pattern))
(for-in /type (list //T_/Stat_/Int_/One //T_/Expn_/Int_/One //T_/Cond_/Int_/One //T_/Lvalue_/Int_/One //T_/Defn_/Int_/One //T_/Assign_/Int_/One //T_/Guarded_/Int_/One //T_/Action_/Int_/One //T_/Name_/Int_/One) 
 (vector-set! //Syntax_/Type (- /type 1) //Syntax_/One_/Int))
(for-in /type (list //T_/Stat_/Int_/Any //T_/Expn_/Int_/Any //T_/Cond_/Int_/Any //T_/Lvalue_/Int_/Any //T_/Defn_/Int_/Any //T_/Assign_/Int_/Any //T_/Guarded_/Int_/Any //T_/Action_/Int_/Any) 
 (vector-set! //Syntax_/Type (- /type 1) //Syntax_/Any_/Int))
(for-in /type (list //T_/Stat_/Var_/One //T_/Expn_/Var_/One //T_/Cond_/Var_/One //T_/Lvalue_/Var_/One //T_/Defn_/Var_/One //T_/Assign_/Var_/One //T_/Guarded_/Var_/One //T_/Action_/Var_/One //T_/Name_/Var_/One) 
 (vector-set! //Syntax_/Type (- /type 1) //Syntax_/One_/Var))
(for-in /type (list //T_/Stat_/Var_/Any //T_/Expn_/Var_/Any //T_/Cond_/Var_/Any //T_/Lvalue_/Var_/Any //T_/Defn_/Var_/Any //T_/Assign_/Var_/Any //T_/Guarded_/Var_/Any //T_/Action_/Var_/Any) 
 (vector-set! //Syntax_/Type (- /type 1) //Syntax_/Any_/Var))
(for-in /type (list //T_/Ifmatch_/Stat //T_/Ifmatch_/Expn //T_/Ifmatch_/Cond //T_/Ifmatch_/Defn //T_/Ifmatch_/Lvalue //T_/Ifmatch_/Assign //T_/Ifmatch_/Guarded //T_/Ifmatch_/Action //T_/Ifmatch_/Stats //T_/Ifmatch_/Expns //T_/Ifmatch_/Lvalues //T_/Ifmatch_/Assigns //T_/Ifmatch_/Defns) 
 (vector-set! //Syntax_/Type (- /type 1) //Syntax_/Ifmatch))
(for-in /type (list //T_/Fill_/Stat //T_/Fill_/Expn //T_/Fill_/Cond //T_/Fill_/Defn //T_/Fill_/Lvalue //T_/Fill_/Assign //T_/Fill_/Guarded //T_/Fill_/Action //T_/Fill_/Stats //T_/Fill_/Stats //T_/Fill_/Lvalues //T_/Fill_/Assigns //T_/Fill_/Defns) 
 (vector-set! //Syntax_/Type (- /type 1) //Syntax_/Fill))
; Ensure Lvalues are converted to Expressions (and vice-versa): 
(for /type 1 1999 1 
 (begin
  (vector-set! //Syntax_/V_/To_/E (- /type 1) /type)
  (vector-set! //Syntax_/E_/To_/V (- /type 1) /type)))
(vector-set! //Syntax_/V_/To_/E (- //T_/Var_/Lvalue 1) //T_/Variable)
(vector-set! //Syntax_/V_/To_/E (- //T_/Aref_/Lvalue 1) //T_/Aref)
(vector-set! //Syntax_/V_/To_/E (- //T_/Sub_/Seg_/Lvalue 1) //T_/Sub_/Seg)
(vector-set! //Syntax_/V_/To_/E (- //T_/Rel_/Seg_/Lvalue 1) //T_/Rel_/Seg)
(vector-set! //Syntax_/V_/To_/E (- //T_/Final_/Seg_/Lvalue 1) //T_/Final_/Seg)
(vector-set! //Syntax_/V_/To_/E (- //T_/Struct_/Lvalue 1) //T_/Struct)
(vector-set! //Syntax_/V_/To_/E (- //T_/Mem_/Lvalue 1) //T_/Mem)
(vector-set! //Syntax_/V_/To_/E (- //T_/Mem_/Seg_/Lvalue 1) //T_/Mem_/Seg)
(vector-set! //Syntax_/V_/To_/E (- //T_/Mem_/Rel_/Lvalue 1) //T_/Mem_/Rel)
(vector-set! //Syntax_/E_/To_/V (- //T_/Variable 1) //T_/Var_/Lvalue)
(vector-set! //Syntax_/E_/To_/V (- //T_/Aref 1) //T_/Aref_/Lvalue)
(vector-set! //Syntax_/E_/To_/V (- //T_/Sub_/Seg 1) //T_/Sub_/Seg_/Lvalue)
(vector-set! //Syntax_/E_/To_/V (- //T_/Rel_/Seg 1) //T_/Rel_/Seg_/Lvalue)
(vector-set! //Syntax_/E_/To_/V (- //T_/Final_/Seg 1) //T_/Final_/Seg_/Lvalue)
(vector-set! //Syntax_/E_/To_/V (- //T_/Struct 1) //T_/Struct_/Lvalue)
(vector-set! //Syntax_/E_/To_/V (- //T_/Mem 1) //T_/Mem_/Lvalue)
(vector-set! //Syntax_/E_/To_/V (- //T_/Mem_/Seg 1) //T_/Mem_/Seg_/Lvalue)
(vector-set! //Syntax_/E_/To_/V (- //T_/Mem_/Rel 1) //T_/Mem_/Rel_/Lvalue)
; Record which types have values: 
(vector-set! //Syntax_/Value (- //T_/Name 1) 1)
(vector-set! //Syntax_/Value (- //T_/Call 1) 1)
(vector-set! //Syntax_/Value (- //T_/Comment 1) 1)
(vector-set! //Syntax_/Value (- //T_/Exit 1) 1)
(vector-set! //Syntax_/Value (- //T_/Number 1) 1)
(vector-set! //Syntax_/Value (- //T_/String 1) 1)
(vector-set! //Syntax_/Value (- //T_/Variable 1) 1)
(vector-set! //Syntax_/Value (- //T_/Var_/Lvalue 1) 1)
(vector-set! //Syntax_/Value (- //T_/Primed_/Var 1) 1)
(vector-set! //Syntax_/Value (- //T_/Stat_/Pat_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Stat_/Pat_/Many 1) 1)
(vector-set! //Syntax_/Value (- //T_/Stat_/Pat_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Expn_/Pat_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Expn_/Pat_/Many 1) 1)
(vector-set! //Syntax_/Value (- //T_/Expn_/Pat_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Cond_/Pat_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Cond_/Pat_/Many 1) 1)
(vector-set! //Syntax_/Value (- //T_/Cond_/Pat_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Defn_/Pat_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Defn_/Pat_/Many 1) 1)
(vector-set! //Syntax_/Value (- //T_/Defn_/Pat_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Lvalue_/Pat_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Lvalue_/Pat_/Many 1) 1)
(vector-set! //Syntax_/Value (- //T_/Lvalue_/Pat_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Assign_/Pat_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Assign_/Pat_/Many 1) 1)
(vector-set! //Syntax_/Value (- //T_/Assign_/Pat_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Guarded_/Pat_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Guarded_/Pat_/Many 1) 1)
(vector-set! //Syntax_/Value (- //T_/Guarded_/Pat_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Action_/Pat_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Action_/Pat_/Many 1) 1)
(vector-set! //Syntax_/Value (- //T_/Action_/Pat_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Name_/Pat_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Stat_/Var_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Stat_/Var_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Expn_/Var_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Expn_/Var_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Cond_/Var_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Cond_/Var_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Defn_/Var_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Defn_/Var_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Lvalue_/Var_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Lvalue_/Var_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Assign_/Var_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Assign_/Var_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Guarded_/Var_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Guarded_/Var_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Action_/Var_/One 1) 1)
(vector-set! //Syntax_/Value (- //T_/Action_/Var_/Any 1) 1)
(vector-set! //Syntax_/Value (- //T_/Name_/Var_/One 1) 1)
; The _Int_ types have one (expression) component and no value 
; Functions to access this data: 
(define (@List_Type? /type)
 
 (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/List))

(define (@All_Pattern_Type? /type)
 
 (or (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/One_/Pattern) (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Many_/Pattern) (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Any_/Pattern) (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/One_/Int) (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Any_/Int) (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/One_/Var) (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Any_/Var)))

(define (@One_Pattern_Type? /type)
 
 (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/One_/Pattern))

(define (@Many_Pattern_Type? /type)
 
 (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Many_/Pattern))

(define (@Any_Pattern_Type? /type)
 
 (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Any_/Pattern))

(define (@One_Int_Type? /type)
 
 (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/One_/Int))

(define (@Any_Int_Type? /type)
 
 (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Any_/Int))

(define (@One_Var_Type? /type)
 
 (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/One_/Var))

(define (@Any_Var_Type? /type)
 
 (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Any_/Var))

(define (@Star_Match_Type? /type)
 
 (or (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Many_/Pattern) (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Any_/Pattern) (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Any_/Int) (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Any_/Var)))

(define (@Ifmatch_Type? /type)
 
 (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Ifmatch))

(define (@Fill_Type? /type)
 
 (equal? (vector-ref //Syntax_/Type (- /type 1)) //Syntax_/Fill))

(define (@Syntax /type)
 
 (vector-ref //Syntax_/Comps (- /type 1)))

(define (@Type_Name /type)
 
 (vector-ref //Syntax_/Name (- /type 1)))

(define (@Var_To_Expn_Type /type)
 
 (vector-ref //Syntax_/V_/To_/E (- /type 1)))

(define (@Expn_To_Var_Type /type)
 
 (vector-ref //Syntax_/E_/To_/V (- /type 1)))

(define (@Var_To_Expn //I)
 
 (@Make (vector-ref //Syntax_/V_/To_/E (- (@ST //I) 1)) (@Value //I) (if (equal? (vector-ref //Syntax_/Type (- (@ST //I) 1)) //Syntax_/Fill) (@Components //I) (my-map @Var_To_Expn (@Components //I)))))

(define (@Expn_To_Var //I)
 
 (if (member (@ST //I) (list //T_/Aref //T_/Sub_/Seg //T_/Rel_/Seg)) (@Make (vector-ref //Syntax_/E_/To_/V (- (@ST //I) 1)) (@Value //I) (cons (@Expn_To_Var (@Get_n //I 1)) (cdr (@Components //I)))) (if (= (@ST //I) //T_/Struct) (@Make //T_/Struct_/Lvalue '() (list (@Get_n //I 1) (@Expn_To_Var (@Get_n //I 2)))) (@Make (vector-ref //Syntax_/E_/To_/V (- (@ST //I) 1)) (@Value //I) (@Components //I)))))

(define (@Var_To_Expn_List //L)
 
 (my-map @Var_To_Expn //L))

(define (@Expn_To_Var_List //L)
 
 (my-map @Expn_To_Var //L))

(define (@Has_Value_Type? /type)
 
 (= (vector-ref //Syntax_/Value (- /type 1)) 1))

(define (@Has_Comps_Type? /type)
 
 (= (vector-ref //Syntax_/Value (- /type 1)) 0))

(define (@Has_Value? //I)
 
 (= (vector-ref //Syntax_/Value (- (@ST //I) 1)) 1))

(define (@Has_Comps? //I)
 
 (= (vector-ref //Syntax_/Value (- (@ST //I) 1)) 0))

(set! //Call_/Types_/Set (@Make_Set (list //T_/X_/Proc_/Call //T_/M/W_/Proc_/Call //T_/Call //T_/Proc_/Call)))
(set! //Ext_/Call_/Types_/Set (@Make_Set (list //T_/M/W_/Proc_/Call //T_/X_/Proc_/Call)))
#t
