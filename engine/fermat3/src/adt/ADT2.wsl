
C:" Fast versions of the basic ADT functions. ";

C:" The structure of a WSL item is either: ";
C:" CONS(dtable, CONS(spec_type, value)) OR: ";
C:" CONS(dtable, CONS(spec_type, component_list)) ";



C:" These definitions assume that we ONLY call @V() on an item which is known ";
C:" to have a value: ";

MW_FUNCT @V(I) == : SKIP;
  (TAIL(TAIL(I))) .;

MW_FUNCT @Cs(I) == : SKIP;
  (TAIL(TAIL(I))) .;


C:" These definitions are more relaxed and allow the functions to be applied ";
C:" to any type of item: ";

MW_FUNCT @Value(I) == : SKIP;
  (IF @Has_Comps_Type?(HEAD(TAIL(I)))
    THEN < >
    ELSE TAIL(TAIL(I)) FI) .;

MW_FUNCT @Components(I) == : SKIP;
  (IF @Has_Comps_Type?(HEAD(TAIL(I)))
     THEN TAIL(TAIL(I))
     ELSE < > FI) .;


MW_BFUNCT @Components?(I) == : SKIP; (NOT EMPTY?(@Components(I))) .;

MW_BFUNCT @Cs?(I) == : SKIP; (NOT EMPTY?(@Components(I))) .;


MW_FUNCT @Spec_Type(I) == : SKIP;
  (HEAD(TAIL(I))) .;

MW_FUNCT @ST(I) == : SKIP;
  (HEAD(TAIL(I))) .;



Spec_To_Gen_Type := ARRAY(1999, 0);
FOR i := 1 TO 1999 STEP 1 DO
  Spec_To_Gen_Type[i] := IF i < 100 THEN i ELSE i DIV 100 FI OD;

MW_FUNCT @Gen_Type(I) == : SKIP;
  (Spec_To_Gen_Type[HEAD(TAIL(I))]) .;

MW_FUNCT @GT(I) == : SKIP;
  (Spec_To_Gen_Type[HEAD(TAIL(I))]) .;



MW_FUNCT @Size(I) == : SKIP;
  (IF @Has_Comps_Type?(HEAD(TAIL(I)))
    THEN LENGTH(I) - 2
    ELSE 0 FI) .;


C:" @Get_n is now a macro which checks for small integer constant n ";

MW_FUNCT @Get_L(I, n, m) == : SKIP;
  (!XF firstn(m - n + 1, !XF nthcdr(n + 1, I))) .;

MW_FUNCT @Get(I, posn) == : SKIP;
  (IF EMPTY?(posn) THEN I
		   ELSE @Get(I^HEAD(posn), TAIL(posn)) FI) .;


MW_FUNCT @Make(ST, value, comps) == : SKIP;
  (IF EMPTY?(value)
     THEN << >> ++ <ST> ++ comps
     ELSE << >> ++ <ST> ++ value FI) .;




C:" Routines for handling sets as sorted lists, using @Gen_Less? for comparisons. ";



MW_FUNCT @Set_Union(a, b) == : SKIP;
  (IF EMPTY?(a)
     THEN b
   ELSE IF EMPTY?(b)
     THEN a
   ELSE IF HEAD(a) = HEAD(b)
     THEN <HEAD(a)> ++ @Set_Union(TAIL(a), TAIL(b))
   ELSE IF @Gen_Less?(HEAD(a), HEAD(b))
     THEN <HEAD(a)> ++ @Set_Union(TAIL(a), b)
     ELSE <HEAD(b)> ++ @Set_Union(a, TAIL(b)) FI FI FI FI) .;


MW_FUNCT @Set_Intersect(a, b) == : SKIP;
  (IF EMPTY?(a) OR EMPTY?(b)
     THEN < >
   ELSE IF HEAD(a) = HEAD(b)
     THEN <HEAD(a)> ++ @Set_Intersect(TAIL(a), TAIL(b))
   ELSE IF @Gen_Less?(HEAD(a), HEAD(b))
     THEN @Set_Intersect(TAIL(a), b)
     ELSE @Set_Intersect(a, TAIL(b)) FI FI FI) .;


MW_FUNCT @Set_Difference(a, b) == : SKIP;
  (IF EMPTY?(a)
     THEN < >
   ELSE IF EMPTY?(b)
     THEN a
   ELSE IF HEAD(a) = HEAD(b)
     THEN @Set_Difference(TAIL(a), TAIL(b))
   ELSE IF @Gen_Less?(HEAD(a), HEAD(b))
     THEN <HEAD(a)> ++ @Set_Difference(TAIL(a), b)
     ELSE @Set_Difference(a, TAIL(b)) FI FI FI FI) .;


MW_BFUNCT @Set_Subset?(a, b) == : SKIP;
  (EMPTY?(a)
    OR NOT EMPTY?(b)
	 AND ((HEAD(a) = HEAD(b) AND @Set_Subset?(TAIL(a), TAIL(b)))
		OR (@Gen_Less?(HEAD(b), HEAD(a))
		     AND @Set_Subset?(a, TAIL(b))))) .;


C:" Sort a list of elements (maybe with duplicates) and return a set: ";

MW_FUNCT @Make_Set(L) ==
  VAR < R := < >, len := LENGTH(L) >:
  IF len <= 1
    THEN R := L
  ELSIF len = 2
    THEN IF HEAD(L) = HEAD(TAIL(L))
	   THEN R := <HEAD(L)>
	 ELSIF @Gen_Less?(HEAD(L), HEAD(TAIL(L)))
	   THEN R := L
	   ELSE R := <HEAD(TAIL(L)), HEAD(L)> FI
    ELSE VAR < mid := len DIV 2 >:
	 R := @Set_Union(@Make_Set(L[1..mid]), @Make_Set(L[mid+1..])) ENDVAR FI;
  (R) .;


C:" An efficient way to form the union or intersection of a list of sets ";
C:" is to pick the two smallest sets in the list and process those, ";
C:" returning the result to the list. Repeat until only one set remains. ";
C:" I think that this can be done efficiently using a heap structure. ";
C:" Such a function can be used to optimise REDUCE(\/, ...) ";
C:" and REDUCE(/\, ...) functions. ";




C:" ============================================================================== "
