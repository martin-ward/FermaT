C:"
==========================================================================
FermaT Transformation System
Copyright (C) 2001 Software Migrations Limited.
Email: martin@gkc.org.uk

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
==========================================================================";
 


MW_PROC @Delete_Item_Test() ==
   VAR < ST := @ST(@I) >:
   IF ST = T_Action
     THEN VAR < N := @V(@I^1) >:
          IF @V(@GParent^1) = N
           THEN @Fail("It is invalid to delete the starting action.")
           ELSE IF @Called?(N, @Parent)
                  THEN @Fail("The action is called somewhere.") 
                  ELSE @Pass FI FI ENDVAR
   ELSIF ST = T_Proc AND @Non_Recursive_Calls(@V(@I^1), @GParent) = 0
     THEN @Pass
   ELSIF (ST = T_Funct OR ST = T_BFunct) AND 
	   @Non_Recursive_Funct_Calls(@V(@I^1), @GParent) = 0
     THEN @Pass
   ELSIF ST = T_Assert
     THEN @Pass
   ELSIF ST = T_Skip
     THEN @Pass
   ELSIF ST = T_Comment
     THEN @Pass
   ELSIF ST = T_Assignment AND @Size(@I) = 1 AND @LR_Equal?(@I^1^1, @I^1^2)
     THEN @Pass
   ELSIF ST = T_While AND @False?(@I^1) 
     THEN @Pass
   ELSIF ST = T_Guarded
     THEN VAR < B := @Simplify_Cond(@I^1), A := @Make(T_False,< >,< >),
                Cnd := < >, P := < > >:
      IF @ST(B) = T_False
	THEN @Pass
	ELSE P := @Posn;
	     IF @ST(@Parent)=T_Cond
	       THEN WHILE @Left? DO
		      @Left;
		      Cnd := @Simplify_Cond(@I^1);
		      A := @Or(A, Cnd);
		      IF @Implies?(B, Cnd) OR @ST(A) = T_True
			 THEN @Pass FI OD;
		    @Goto(P) FI;
	     IF NOT(@Passed?)
	       THEN @Down_Last; @Down;
		    DO IF (@Failed?) THEN EXIT(1) FI;
		       IF NOT(@Trans?(TR_Delete_Item)) 
			 THEN @Fail("Component cannot be deleted") FI;
		       IF @Right? THEN @Right ELSE EXIT(1) FI OD;
		    @Goto(P); 
		    IF NOT @Failed? THEN @Pass FI FI FI ENDVAR

   ELSIF @GT(@I) = T_Expression THEN
	 VAR < I_One:= FILL Expression 1 ENDFILL,
	       I_Zero:= FILL Expression 0 ENDFILL >:
	    
	    IF (@Equal?(@I, I_One) 
		 AND (@ST(@Parent) = T_Times
		       OR @Left? AND @ST(@Parent) = T_Divide))
	       OR (@Equal?(@I, I_Zero) 
		    AND (@ST(@Parent) = T_Plus
			  OR @ST(@Parent)=T_Minus AND @Left?))
	       THEN @Pass FI ENDVAR

   ELSIF @GT(@I) = T_Condition THEN
	    IF @False?(@I) AND @ST(@Parent) = T_Or
		 OR @True?(@I) AND @ST(@Parent) = T_And
	      THEN @Pass FI

     ELSE IF @ST(@I) = T_For
	    THEN VAR < E1 := @I^2, E2 := @I^3, E3 := @I^4 >:
		 C: "Check whether the loop will be executed.";
		 IF ((@True?((FILL Condition ~?E3 > 0 ENDFILL)) AND
		      @True?((FILL Condition ~?E2 < ~?E1 ENDFILL))) OR
		     (@True?((FILL Condition ~?E3 < 0 ENDFILL)) AND
		      @True?((FILL Condition ~?E2 > ~?E1 ENDFILL))))
		    THEN @Pass FI ENDVAR FI FI;

   IF NOT @Passed? AND @Up?
	AND (@GT(@I) = T_Statement OR @GT(@I) = T_Statements
	      OR @ST(@I) = T_Guarded OR @ST(@I) = T_Assign) THEN 
      VAR < P := @Posn_n >:
      @Up; 
      IF NOT(@Is_Reachable?(<P>)) THEN @Pass FI ENDVAR FI;

   IF NOT(@Passed?) THEN @Fail("The item is not redundant") FI ENDVAR.;


MW_PROC @Delete_Item_Code(Data) == 
  IF @ST(@I) = T_Action
    THEN @Delete
  ELSIF @ST(@I) = T_Guarded AND @ST(@Parent) = T_Cond
    THEN VAR < B := @I^1, P := @Posn, A := @Make(T_False,< >,< >),
                Cnd := < >, OK := 0>:
         IF @False?(B)
           THEN @Clever_Delete
           ELSE WHILE @Left? DO
                  @Left;
                  Cnd := @Simplify_Cond(@I^1);
                  A := @Or(A, Cnd);
                  IF @Implies?(B, Cnd) OR @ST(A) = T_True
                     THEN OK:=1 FI OD;
                @Goto(P);

                IF OK = 1
                  THEN @Clever_Delete
                  ELSE @Down_Last;
                       @Delete;
                       @Up; @Up;
                       @Fix_Cond;
                       @Goto(P) FI FI ENDVAR


   ELSIF @GT(@I) = T_Expression
     THEN IF @Size(@Parent) > 2
	    THEN @Delete
	    ELSE IF @Left? THEN @Left ELSE @Right FI;
		 VAR < Exp := @I >:
		 @Up;
		 @Paste_Over(Exp) ENDVAR FI 

   ELSIF @GT(@I) = T_Condition
     THEN IF @Size(@Parent)>2
	    THEN @Delete
	    ELSE IF @Left? THEN @Left ELSE @Right FI;
		 VAR < Con := @I >:
		 @Up;
		 @Paste_Over(Con) ENDVAR FI 

      ELSE @Clever_Delete FI.


