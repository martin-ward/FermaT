C:"
==========================================================================
FermaT Transformation System
Copyright (C) 2001 Software Migrations Limited.
Email: martin@gkc.org.uk

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
==========================================================================";


MW_PROC @While_To_Reduce_Test() ==
  IF @ST(@I) <> T_While
    THEN @Fail("Current item is not a While loop")
    ELSE @Edit;
         IFMATCH Statement
                  WHILE ~?i < ~?n DO
                    ~*S OD
           THEN @Paste_Over(FILL Statement 
                              WHILE ~?i <= ~?n - 1 DO
                                ~*S OD ENDFILL) ENDMATCH;
         IFMATCH Statement
                  WHILE ~?i <= ~?n DO
                    ~*S;
                    < ~?=i := ~?=i + 1, ~?v := ~?e > OD
           THEN @Paste_Over(FILL Statement 
                              WHILE ~?i <= ~?n DO
                                ~*S;
                                < ~?v := ~?e, ~?i := ~?i + 1 > OD ENDFILL) ENDMATCH;
         IFMATCH Statement
                  WHILE ~?i <= ~?n DO
                    ~*S;
                    < ~?v := ~?e, ~?=i := ~?=i + 1 > OD
           THEN IF NOT SUBSET?(REDUCE("\\/", MAP("@Stat_Types", S)), <T_Assert>)
                  THEN @Fail("Loop body is not in a suitable form")
                ELSIF @Elt_Clash?(@Elements(i), @Elements(v))
                  THEN @Fail("Loop index is assigned more than once")
                ELSIF EMPTY?(@WR_Reduce_Pars(v, e, i, n))
                  THEN @Fail("Cannot determine the parameters for the REDUCE")
                  ELSE @Pass FI
           ELSE @Fail("While loop is not in a suitable form") ENDMATCH;
         @Undo_Edit FI .;


MW_PROC @While_To_Reduce_Code (Data) ==
  VAR < pars := < >, e1 := < >, e2 := < >, e3 := < >, new := < > >:
  IFMATCH Statement
           WHILE ~?i < ~?n DO
             ~*S OD
    THEN @Paste_Over(FILL Statement 
                       WHILE ~?i <= ~?n - 1 DO
                         ~*S OD ENDFILL) ENDMATCH;
  IFMATCH Statement
           WHILE ~?i <= ~?n DO
             ~*S;
             < ~?=i := ~?=i + 1, ~?v := ~?e > OD
    THEN @Paste_Over(FILL Statement 
                       WHILE ~?i <= ~?n DO
                         ~*S;
                         < ~?v := ~?e, ~?i := ~?i + 1 > OD ENDFILL) ENDMATCH;
  IFMATCH Statement
           WHILE ~?i <= ~?n DO
             ~*S;
	     < ~?v := ~?e, ~?=i := ~?=i + 1 > OD
    THEN pars := @WR_Reduce_Pars(v, e, i, n);
         IF LENGTH(pars) = 1
	   THEN e3 := pars[1]
	   ELSE C:" Replace e in the assertion by the whole sequence ";
                e1 := pars[2];
                e2 := pars[3];
                new := < >;
                @Edit;
                FOR S1 IN S DO
                  IF @ST(S1) = T_Assert
                    THEN @New_Program(S1);
                         FOREACH Expression DO
                           IF @Equal?(e2, @I)
                             THEN @Paste_Over(e1) FI OD;
                         C:" Collect the conditions in the assertions ";
                         new := <@I^1> ++ new FI OD;
                @Undo_Edit;
                IF NOT EMPTY?(new)
                  THEN @Paste_Before(@Make(T_Assert, < >,
                                           <@Simplify_Cond(@Make(T_And, < >, new))>));
                       @Right FI;
                e3 := @Make(T_Reduce, < >, pars[1..2]);
                IF @ST(e) IN <T_Funct_Call, T_X_Funct_Call, T_MW_Funct_Call>
                  THEN e3 := @Make(@ST(e), < >, <e^1, @Make(T_Expressions, < >,
                                                            <@Lvalue_To_Expn(v), e3>)>)
                  ELSE e3 := @Make(@ST(e), < >, <@Lvalue_To_Expn(v), e3>) FI FI;
	 @Paste_Over(FILL Statement ~?v := ~?e3 ENDFILL);

         SKIP ENDMATCH ENDVAR .;


C:" Try to work out the parameters for the REDUCE operation: ";

MW_FUNCT @WR_Reduce_Pars(vv, e, i, n) ==
  VAR < v := @Lvalue_To_Expn(vv), name := < >,  R := < > >:

  IF @Size(e) = 2 AND @ST(e) IN Comm_Ops AND @Equal?(v, e^2)
    THEN e := @Make(@ST(e), < >, <e^2, e^1>) FI;

  IF FALSE
    THEN PRINT("v = "); @Print_WSL(v, "");
         PRINT("e = "); @Print_WSL(e, "");
         PRINT("i = "); @Print_WSL(i, "") FI;

  IF @ST(e) IN <T_Funct_Call, T_X_Funct_Call, T_MW_Funct_Call>
       AND @Size(e^2) = 2 AND @Equal?(v, e^2^1)
    THEN R := @WR_Reduce_Par2(e^1, v, e^2^2, i, n)
  ELSIF @ST(e) IN <T_Plus, T_Minus, T_Times, T_Divide, T_Union, T_Intersection, T_Concat,
                   T_Max, T_Min, T_Exponent>
          AND @Size(e) = 2 AND @Equal?(v, e^1)
    THEN IF @ST(e) = T_Plus
           THEN name := @Name(@Make_Name("+"))
	 ELSIF @ST(e) = T_Minus
	   THEN name := @Name(@Make_Name("-"))
	 ELSIF @ST(e) = T_Times
	   THEN name := @Name(@Make_Name("*"))
	 ELSIF @ST(e) = T_Divide
	   THEN name := @Name(@Make_Name("/"))
	 ELSIF @ST(e) = T_Union
	   THEN name := @Name(@Make_Name("\\/"))
	 ELSIF @ST(e) = T_Intersection
	   THEN name := @Name(@Make_Name("/\\"))
	 ELSIF @ST(e) = T_Concat
	   THEN name := @Name(@Make_Name("++"))
	 ELSIF @ST(e) = T_Exponent
	   THEN name := @Name(@Make_Name("**"))
	   ELSE name := @Name(@Make_Name(@Type_Name(@ST(e)))) FI;
         R :=  @WR_Reduce_Par2(name, v, e^2, i, n) FI;

  (R) .;


C:" Compute the second parameter (the list of elements) for the REDUCE ";

MW_FUNCT @WR_Reduce_Par2(par1, v, e, i, n) ==
  VAR < R := < > >:
  IF @ST(e) = T_Aref AND @Size(e^2) = 1 AND @Equal?(e^2^1, i)
    THEN R := <par1, @Make(T_Sub_Seg, < >, <e^1, i, n>), e>
  ELSIF @ST(e) = T_Number
    THEN R := <@Simplify_Expn(FILL Expression ~?e * (~?n - ~?i + 1) ENDFILL)> FI;
  (R) .;



SKIP






