C:"
==========================================================================
FermaT Transformation System
Copyright (C) 2001 Software Migrations Limited.
Email: martin@gkc.org.uk

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
==========================================================================";

MW_PROC @Absorb_Right_Test() ==
  IF (@GT(@I) = T_Assign) AND @Up? AND NOT @Left? AND NOT @Right? THEN @Up FI;
  IF @GT(@I) <> T_Statement
    THEN @Fail("The selected item is not a Statement.")
  ELSIF NOT @Right?
    THEN @Fail("There is no statement to the right of this one.")
  ELSIF @ST(@I) = T_Assignment
    THEN @Right;
	 IF @ST(@I) = T_Assignment AND @Trans?(TR_Absorb_Left)
	    THEN @Pass 
	    ELSE @Fail("An assignment can only 'absorb' another assignment") FI;
	 @Left   
  ELSIF @ST(@I) = T_For
    THEN @Right;
	 IF NOT EMPTY?(@Assigned(@I) /\ @Used(@I))
	      OR NOT EMPTY?(@Stat_Types(@I) /\ Call_Types_Set)
	   THEN @Fail("A statement cannot be absorbed into a `For' if it could assign to variables it uses.")
	   ELSE C: "The thing being assigned is OK, but is it compatible with the loop?";
		C: "Before we go on, we need to note what variables are used in it.";
		VAR < V := @Variables(@I) >:
		@Left;
		IF @ST(@I) = T_For
		  THEN VAR < L := @V(@I^1), E1 := @I^2, E2 := @I^3, E3 := @I^4, S := @Cs(@I^5) >:
		       C: "Check that the loop doesn't use the same variables as the other statement...";
		       C: "...and check that the loop will be executed at least once.";
		       IF NOT EMPTY?(V /\ @Variables(@I^5)) OR L IN V
			 THEN @Fail("The loop used the same variables as the other statement.")
		       ELSIF NOT ((@True?((FILL Condition ~?E3 > 0 ENDFILL)) AND
				   @True?((FILL Condition ~?E2 >= ~?E1 ENDFILL))) OR
				  (@True?((FILL Condition ~?E3 < 0 ENDFILL)) AND
				   @True?((FILL Condition ~?E2 <= ~?E1 ENDFILL))))
			 THEN @Fail("The loop won't definitely execute.")
			 ELSE @Pass FI ENDVAR FI ENDVAR FI
  ELSIF @ST(@I) = T_Var
    THEN C: "Check that the statement to be absorbed doesn't use any of the local variables.";
	 VAR < V := @Assigned(@I^1) >:
	 @Right;
	 IF NOT @Is_Proper?
	   THEN @Fail("Cannot absorb a non-proper statement into a simple statement")
	 ELSIF NOT EMPTY?(V /\ @Variables(@I)) OR
	      NOT EMPTY?(@Stat_Types(@I) /\ Call_Types_Set)
	   THEN @Fail("The statement being absorbed could use some of the local variables.")
	   ELSE @Pass FI ENDVAR
  ELSIF @ST(@I) = T_Where
    THEN C: "Check that the statement to be absorbed doesn't use any of the definitions.";
	 VAR < D := @Make_Set(MAP("@V1", @Cs(@I^2))) >:
	 @Right;
	 IF NOT EMPTY?(D /\ @Make_Set(MAP("HEAD", @Proc_Calls(@I))
					   ++ MAP("HEAD", @Funct_Calls(@I))))
	   THEN @Fail("The statement being absorbed uses some of the definitions.")
	   ELSE @Pass FI ENDVAR
  ELSIF @ST(@I) = T_While
    THEN @Right;
	 IF NOT @Is_Proper?
	   THEN @Fail("Cannot absorb a non-proper statement into a simple statement")
	 ELSIF NOT EMPTY?(@Assigned(@I) /\ @Used(@I))
	      OR NOT EMPTY?(@Stat_Types(@I) /\ Call_Types_Set)
	   THEN @Fail("A statement cannot be absorbed into a `While' if it could assign to variables it uses.")
	   ELSE C: "The thing being assigned is OK, but is it compatible with the loop?";
		C: "Before we go on, we need to note what variables are used in it.";
		VAR < V := @Variables(@I), B := < > >:
		@Left;
		B := @I^1;
		C: "Check that the loop doesn't use the same variables as the other statement.";
		C: "Now check that the loop will be executed at least once.";
		C: "This is done by looking for an assertion before the loop.";
		IF NOT EMPTY?(V /\ @Variables(@I))
		  THEN @Fail("The loop used the same variables as the other statement.")
		ELSIF NOT @Left? OR @ST(@Parent^(@Posn_n - 1)) <> T_Assert
		  THEN @Fail("There is no assertion before the loop.")
		  ELSE @Left;
		       C: "The assertion my imply that the loop executes at least once.";
		       IF NOT @Implies?(@I^1, B)
			 THEN @Fail("The assertion does not imply that the loop executes.")
			 ELSE @Pass FI FI ENDVAR FI
  ELSIF @Simple?(@I) AND @ST(@I) <> T_Exit
    THEN @Fail("The selected statement must be non-simple, or an `EXIT' statement.")
    ELSE @Pass FI .;


MW_PROC @Absorb_Right_Code(Data) ==
  IF (@GT(@I) = T_Assign) AND @Up? AND NOT @Left? AND NOT @Right? THEN @Up FI;
  IF @ST(@I) = T_Assignment
    THEN @Right; @Trans(TR_Absorb_Left, "")
    ELSE @Absorb_Right_Code2(Data) FI .;


MW_PROC @Absorb_Right_Code2(Data) ==
  VAR < AS := @AS_Type, OK := 0 >:
  @Right; @Cut; @Left;
  IF @ST(@I) = T_Var AND @ST(@Buffer) = T_Var AND @Assigned(@I^1) = @Assigned(@Buffer^1)
    THEN @Down_Last; @Down_Last;
         @Paste_After(@Make(T_Assignment, < >, @Cs(@Buffer^1)));
	 @Right;
	 @Splice_After(@Cs(@Buffer^2));
	 @Up; @Up
  ELSIF @ST(@I) IN <T_For, T_Var, T_While>
    THEN @Down_Last; @Down_Last; @Paste_After(@Buffer); @Up; @Up
  ELSIF @ST(@I) = T_Where
    THEN @Down; @Down_Last; @Paste_After(@Buffer); @Up; @Up
    ELSE FOREACH STS DO
	   IF Depth = 0 OR (@ST(@I) = T_Exit AND @V(@I) = Depth)
	     THEN IF @ST(@I) = T_Exit AND Depth > 0
		    THEN @Splice_Over(@Increment(@Buffer, AS, Depth, 0))
		  ELSIF @ST(@I) = T_Skip
		    THEN @Paste_Over(@Buffer)
		  ELSIF (@ST(@I) = T_Exit AND Depth = 0) OR @Gen_Improper?(@I, AS)
		    THEN SKIP
		  ELSIF (@ST(@I) = T_Call AND @V(@I) = @Make_Name("Z"))
		    THEN SKIP
		    ELSE @Paste_After(@Buffer) FI FI OD;
	 C: "If we have been merging into an `IF' statement, then we may be able to";
	 C: "simplify the result by aligning any nested `IF' statements.";
	 IF @ST(@I) = T_Cond AND @Size(@I) <= Max_Cond_Size
	   THEN @Down; C:" to first guarded ";
		DO OK := 1;
		   C:" check for comments + IF ";
		   C:" with either nothing after the IF, or <=1 non-improper clause ";
		   C:" in the IF ";
		   @Down_Last; @Down; C:" to first statement ";
		   WHILE @Right? AND @ST(@I) = T_Comment DO @Right OD;
		   IF @ST(@I) <> T_Cond
		     THEN OK := 0
		   ELSIF NOT @Right?
		     THEN OK := 1
		     ELSE OK := 2; C:" one non-improper clause is allowable ";
			  @Down; C:" to first guarded in the inner IF ";
			  DO IF NOT @Gen_Improper?(@I, AS)
			       THEN OK := OK - 1 FI;
			     IF OK > 0 AND @Right? THEN @Right ELSE EXIT(1) FI OD;
			  @Up; C:" back to inner IF " FI;
		   @Up; @Up; C:" back to guarded ";
		   IF OK > 0
		     THEN IF @Trans?(TR_Align_Nested_Statements)
			    THEN @Trans(TR_Align_Nested_Statements, "")
			    ELSE C:" Could be too big for Align_Nested " FI FI;
		   IF @Right? THEN @Right ELSE EXIT(1) FI OD;
		@Up; C:" Back to the cond " FI FI ENDVAR .

